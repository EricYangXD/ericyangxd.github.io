(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{736:function(t,a,s){"use strict";s.r(a);var e=s(7),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"spring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[t._v("#")]),t._v(" Spring")]),t._v(" "),s("ol",[s("li",[t._v("简化开发：Spring 是分层的 JavaSE/EE 应用 full-stack 轻量级开源框架，以 IoC：Inverse of Control（反转控制）和 AOP（Aspect Oriented Programming）面向切面编程为内核。以及由此演化出来的事务处理。")]),t._v(" "),s("li",[t._v("框架整合：MyBatis，Struts，Hibernate 等等")]),t._v(" "),s("li",[t._v("全家桶：Spring Framework、Spring Boot、Spring Cloud 等等")])]),t._v(" "),s("h3",{attrs:{id:"spring-boot-注解类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-注解类型"}},[t._v("#")]),t._v(" Spring-Boot 注解类型")]),t._v(" "),s("ol",[s("li",[t._v("@SpringBootApplication：来标注一个主程序类，说明这是一个 Spring Boot 应用。")]),t._v(" "),s("li",[t._v("@SpringBootConfiguration：Spring Boot 的配置类，标注在某个类上，表示这是一个 Spring Boot 的配置类；")]),t._v(" "),s("li",[t._v("@Configuration 配置类上来标注这个注解；配置类 - 配置文件；配置类也是容器中的一个组件；")]),t._v(" "),s("li",[t._v("@Component 表示一个类是由 Spring 管理的组件；")]),t._v(" "),s("li",[t._v("@EnableAutoConfiguration 开启自动配置功能；以前我们需要配置的东西，Spring Boot 帮我们自动配置；告诉 SpringBoot 开启自动配置功能；这样自动配置才能生效；")]),t._v(" "),s("li",[t._v("@Controller：表示一个类是 Spring MVC 控制器。")]),t._v(" "),s("li",[t._v("@Autowired：用于 bean 的自动依赖注入")]),t._v(" "),s("li",[t._v("@Service：表示一个类是一个 Spring 服务")]),t._v(" "),s("li",[t._v("@Repository：用来表示一个类是 Spring 的存储库。")]),t._v(" "),s("li",[t._v("@RequestMapping：用于将 URL 请求映射到控制器方法。")]),t._v(" "),s("li",[t._v("@PathVariable：用于从 URL 路径中提取一个变量。")]),t._v(" "),s("li",[t._v("@RequestParam：用于从查询字符串或表单数据中提取一个变量。")]),t._v(" "),s("li",[t._v("@ResponseBody：用来表示一个方法应该直接返回响应体。")]),t._v(" "),s("li",[t._v("@ExceptionHandler：用于处理由控制器方法抛出的异常。")]),t._v(" "),s("li",[t._v("@Transactional：用来表示一个方法应该在一个事务中被执行。")]),t._v(" "),s("li",[t._v("@Bean：用于表示一个方法产生一个由 Spring 管理的 bean。")]),t._v(" "),s("li",[t._v("@Value：用于从属性文件或环境变量中注入值。")]),t._v(" "),s("li",[t._v("@Profile：用来激活一个特定的 Spring 配置文件。")])]),t._v(" "),s("h3",{attrs:{id:"项目结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目结构"}},[t._v("#")]),t._v(" 项目结构")]),t._v(" "),s("p",[t._v("这 4 个部分是指 Java Spring MVC 项目的典型结构，它是一种用于构建 Web 应用的架构模式。")]),t._v(" "),s("ul",[s("li",[t._v("controller：这个 package 包含处理传入的 HTTP 请求的类，并将它们路由到适当的服务方法。")]),t._v(" "),s("li",[t._v("model/bean/dto：这个 package 包含定义应用程序的数据模型的类。这包括实体、数据传输对象（DTO）和其他特定领域的对象。")]),t._v(" "),s("li",[t._v("dao/repository(jpa/jdbc)/mapper(mybatis)：这个 package 包含处理应用程序中数据持久性的类。这包括数据库访问、查询和其他与数据相关的操作。")]),t._v(" "),s("li",[t._v("service：这个 package 包含实现应用程序的业务逻辑的类。这包括处理数据、应用规则和其他特定于应用程序领域的操作。")]),t._v(" "),s("li",[t._v("eg.")])]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("/src/main/java：放置项目Java源代码\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_annotation：放置项目自定义注解\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_aspect：放置切面代码\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_config：放置配置类\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_constant：放置常量、枚举等定义\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__consist：存放常量定义\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__enums：存放枚举定义\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_controller：放置控制器代码\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_filter：放置一些过滤、拦截相关的代码\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_mapper：放置数据访问层代码接口\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_model：放置数据模型代码\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__entity：放置数据库实体对象定义\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__dto：存放数据传输对象定义\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__vo：存放显示层对象定义\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_service：放置具体的业务逻辑代码（*接口*和*实现*分离）\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__intf：存放业务逻辑接口定义\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__impl：存放业务逻辑实际实现\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_utils：放置工具类和辅助代码\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n/src/main/resources：放置项目静态资源和配置文件\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_mapper：存放mybatis的XML映射文件（如果是mybatis项目）\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_static：存放网页静态资源，比如下面的js/css/img\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__js：\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__css：\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__img：\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__font：\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__等等\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_template：存放网页模板，比如thymeleaf/freemarker模板等\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__header\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__sidebar\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__bottom\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("__XXX.html等等\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_application.yml       基本配置文件\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_application-dev.yml   开发环境配置文件\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_application-test.yml  测试环境配置文件\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_application-prod.yml  生产环境配置文件\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br")])]),s("h3",{attrs:{id:"ioc-控制反转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ioc-控制反转"}},[t._v("#")]),t._v(" IoC 控制反转")]),t._v(" "),s("p",[t._v("使用对象时，由主动 new 产生对象转换为由外部提供对象，此过程中对象创建控制权由程序转移到外部，此思想称为控制反转。Spring 技术对 IoC 思想进行了实现：")]),t._v(" "),s("ul",[s("li",[t._v("Spring 提供了一个容器，称为 IoC 容器，用来充当 IoC 思想中的「外部」")]),t._v(" "),s("li",[t._v("IoC 容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象在 IoC 容器中统称为 Bean")]),t._v(" "),s("li",[t._v("依赖注入 DI：在容器中建立 bean 与 bean 之间的依赖关系的整个过程，称为依赖注入")])]),t._v(" "),s("h3",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在项目"),s("code",[t._v("resources -> applicationContext.xml")]),t._v("中配置。")])]),t._v(" "),s("li",[s("p",[t._v("导入 Spring 的坐标 spring-context。")])]),t._v(" "),s("li",[s("p",[t._v("配置 bean：")]),t._v(" "),s("ol",[s("li",[t._v("bean 标签表示配置 bean")]),t._v(" "),s("li",[t._v("id 属性表示给 bean 起名字")]),t._v(" "),s("li",[t._v("class 属性表示给 bean 定义类型")])])]),t._v(" "),s("li",[s("p",[t._v("获取 IoC 容器："),s("code",[t._v('ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");')])])]),t._v(" "),s("li",[s("p",[t._v("获取 bean："),s("code",[t._v('BookDao bookDao = (BookDao) ctx.getBean("bookDao");// id')])])]),t._v(" "),s("li",[s("p",[t._v("即可调用"),s("code",[t._v("bookDao.save();")])])]),t._v(" "),s("li",[s("p",[t._v("配置 Dao，业务代码中解耦 new 关键字，可以写一个 setter 方法")])]),t._v(" "),s("li",[s("p",[t._v("在"),s("code",[t._v("applicationContext.xml")]),t._v("中的 bean 标签中配置 server 与 dao 的关系")]),t._v(" "),s("ol",[s("li",[t._v("property 标签表示配置当前 bean 的属性")]),t._v(" "),s("li",[t._v("name 属性表示配置哪个具体的属性")]),t._v(" "),s("li",[t._v("ref 属性表示参照哪一个 bean")])])])]),t._v(" "),s("h3",{attrs:{id:"bean-基础配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-基础配置"}},[t._v("#")]),t._v(" bean 基础配置")]),t._v(" "),s("ol",[s("li",[t._v("name 属性：可以定义多个 bean 的别名用逗号分号空格分隔")]),t._v(" "),s("li",[t._v("scope 属性：Spring 默认创建的实例是单例模式，即 scope 属性是 singleton！非单例模式创建方法：设置 scope 为 prototype")]),t._v(" "),s("li",[t._v("实例化：bean 本质是对象，创建 bean 使用构造方法完成，调用的是无参构造方法，可以通过反射访问私有构造方法\n"),s("ol",[s("li",[t._v("构造方法")]),t._v(" "),s("li",[t._v("静态工厂方法：用得少，bean 中增加"),s("code",[t._v("factory-method")]),t._v("属性告诉 Spring 调哪个方法获得实例，当然也要自己先实现工厂类")]),t._v(" "),s("li",[t._v("实例工厂方法：先添加 bean 使用实例工厂实例化 bean，然后再在原来的 bean 中移除 class，增加"),s("code",[t._v("factory-method")]),t._v("属性设置为新增 bean 的 id，并修改"),s("code",[t._v("factory-method")]),t._v("属性为 class 中的实际方法。")]),t._v(" "),s("li",[t._v("3 的改进型：不需要增加一个 bean。先在工厂方法类中实现"),s("code",[t._v("FactoryBean<要返回的实例的类>")]),t._v("接口，重写两个 get 方法，"),s("code",[t._v("getObjectType()->UserDao.class")]),t._v("类似这样。")])])]),t._v(" "),s("li",[t._v("报错从最后几行往前看")]),t._v(" "),s("li",[t._v("生命周期：\n"),s("ol",[s("li",[t._v("初始化容器：创建对象（内存分配），执行构造方法，执行属性注入（set 操作），执行 bean 初始化方法。init-method、destroy-method 等。")]),t._v(" "),s("li",[t._v("使用 bean：执行业务操作")]),t._v(" "),s("li",[t._v("关闭/销毁容器：执行 bean 销毁方法")])])]),t._v(" "),s("li",[t._v("关闭容器的方式：\n"),s("ol",[s("li",[t._v("手动关闭：ConfigurableApplicationContext 接口 close()操作")]),t._v(" "),s("li",[t._v("注册关闭钩子，在虚拟机退出前先关闭容器，再退出虚拟机：ConfigurableApplicationContext 接口 registerShutdownHook()操作")])])])]),t._v(" "),s("h3",{attrs:{id:"依赖注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入"}},[t._v("#")]),t._v(" 依赖注入")]),t._v(" "),s("p",[t._v("往类中传递数据的方式有几种？普通方法（set 方法）、构造方法。")]),t._v(" "),s("ol",[s("li",[t._v("setter 注入：\n"),s("ol",[s("li",[t._v("简单类型：先在 bean 中定义引用类型属性并提供可供访问的 set 方法，然后在 "),s("code",[t._v("bean")]),t._v(" -> "),s("code",[t._v("property")]),t._v(" 中设置 value 进行传递")]),t._v(" "),s("li",[t._v("引用类型：同上")])])]),t._v(" "),s("li",[t._v("构造器注入：\n"),s("ol",[s("li",[t._v("简单类型：先在 bean 中定义构造方法，然后在 "),s("code",[t._v("bean")]),t._v(" -> "),s("code",[t._v("constructor-arg")]),t._v(" 中设置 name 和 ref/value 进行传递")]),t._v(" "),s("li",[t._v("引用类型：")])])]),t._v(" "),s("li",[t._v("自己开发的模块用 setter 注入")]),t._v(" "),s("li",[t._v("依赖自动装配：\n"),s("ol",[s("li",[t._v("bean 中添加 "),s("code",[t._v('autowire="byType/byName"')]),t._v(" 字段，配合 setter")]),t._v(" "),s("li",[t._v("只用于引用类型，不能对简单类型操作")]),t._v(" "),s("li",[t._v("使用按类型装配时必须保障容器中相同类型的 bean 唯一，推荐使用")]),t._v(" "),s("li",[t._v("使用按名称装配时必须保障容器中具有指定名称的 bean，因变量名与配置耦合，不推荐")]),t._v(" "),s("li",[t._v("自动装配优先级低于 setter 注入与构造器注入，同时出现时自动装配失效")])])]),t._v(" "),s("li",[t._v("集合注入：\n"),s("ol",[s("li",[t._v("array/list/set/map 等：在 ApplicationContext.xml 中，新建一个 bean，然后通过 property 标签配合 name 属性通过 value 或者 ref 来配置")])])])]),t._v(" "),s("h3",{attrs:{id:"加载-properties-配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载-properties-配置文件"}},[t._v("#")]),t._v(" 加载 properties 配置文件")]),t._v(" "),s("p",[t._v("一些数据库用户名密码啥的不应该写在 pom.xml 里，应该单独管理 jdbc.properties")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("把配置写入 jdbc.properties 文件，比如："),s("code",[t._v("jdbc.username=xxx jdbc.password=xxx")])])]),t._v(" "),s("li",[s("p",[t._v("开 context 命名空间")]),t._v(" "),s("ol",[s("li",[t._v("jdbc.properties 中，beans 里面增加一行"),s("code",[t._v('xmlns:context="http://www.springframework.org/schema/context"')]),t._v("，再增加 2 行"),s("code",[t._v("http:.../context")]),t._v("，"),s("code",[t._v("http:.../context/spring-context.xsd")]),t._v("。大部分是这么操作")]),t._v(" "),s("li",[t._v("使用 context 空间加载 properties 配置文件："),s("code",[t._v('<context:property-placeholder location="jdbc.properties"/>')]),t._v("，通过"),s("code",[t._v('system-properties-mode="NEVER"')]),t._v("设置不去加载系统属性，通过 location 属性配置使用不同的 jdbc.properties 文件。")]),t._v(" "),s("li",[t._v("在 bean 中使用属性占位符"),s("code",[t._v("${}")]),t._v("读取 properties 配置文件中的属性。")])])]),t._v(" "),s("li",[s("p",[t._v("不加载系统属性："),s("code",[t._v('<context:property-placeholder location="jdbc.properties" system-properties-mode="NEVER" />')])])]),t._v(" "),s("li",[s("p",[t._v("加载多个："),s("code",[t._v('<context:property-placeholder location="jdbc.properties,jdbc2.properties" />')])])]),t._v(" "),s("li",[s("p",[t._v("加载所有："),s("code",[t._v('<context:property-placeholder location="*.properties" />')])])]),t._v(" "),s("li",[s("p",[t._v("加载 properties 文件"),s("strong",[t._v("标准格式")]),t._v("："),s("code",[t._v('<context:property-placeholder location="classpath:*.properties" />')])])]),t._v(" "),s("li",[s("p",[t._v("从类路径或加载系统属性："),s("code",[t._v('<context:property-placeholder location="classpath*:*.properties" />')])])])]),t._v(" "),s("h3",{attrs:{id:"ioc-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ioc-容器"}},[t._v("#")]),t._v(" IOC 容器")]),t._v(" "),s("ol",[s("li",[t._v("容器初始化方式一：加载类路径下的配置文件："),s("code",[t._v('ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");')])]),t._v(" "),s("li",[t._v("容器初始化方式二：从文件系统下加载配置文件："),s("code",[t._v('ApplicationContext ctx = new FileSystemXmlApplicationContext("D:\\\\applicationContext.xml");')])]),t._v(" "),s("li",[t._v("容器初始化加载多个配置文件："),s("code",[t._v('ApplicationContext ctx = new ClassPathXmlApplicationContext("bean1.xml","bean2.xml");')])]),t._v(" "),s("li",[t._v("获取 bean 方式一：使用 bean 名称获取"),s("code",[t._v('BookDao bookDao = (BookDao) ctx.getBean("bookDao");')])]),t._v(" "),s("li",[t._v("获取 bean 方式二：使用 bean 名称获取并指定类型"),s("code",[t._v('BookDao bookDao = ctx.getBean("bookDao"，BookDao.class);')])]),t._v(" "),s("li",[t._v("获取 bean 方式三：使用 bean 类型获取"),s("code",[t._v("BookDao bookDao = ctx.getBean(BookDao.class);")]),t._v("，此时系统中该类只能有一个。")]),t._v(" "),s("li",[t._v("上古方法：BeanFactory 接口是 IoC 容器的顶层接口，初始化 BeanFactory 对象时，延迟加载 Bean。")]),t._v(" "),s("li",[t._v("ApplicationContext 是 Spring 容器的核心接口，初始化时立即加载 Bean。该接口提供基础的 bean 操作相关方法，通过其它接口扩展器功能。")]),t._v(" "),s("li",[t._v("bean 相关:")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"注解模式开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注解模式开发"}},[t._v("#")]),t._v(" 注解模式开发")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("定义 bean")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("@Component")]),t._v(" "),s("ul",[s("li",[t._v("@Controller")]),t._v(" "),s("li",[t._v("@Service")]),t._v(" "),s("li",[t._v("@Repository")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("<context:component-scan/>")])])])])]),t._v(" "),s("li",[s("p",[t._v("纯注解开发")]),t._v(" "),s("ul",[s("li",[t._v("@Configuration")]),t._v(" "),s("li",[t._v("@ComponentScan，多个值用数组")]),t._v(" "),s("li",[t._v("@AnnotationConfigApplicationContext")])])]),t._v(" "),s("li",[s("p",[t._v("bean 生命周期")]),t._v(" "),s("ul",[s("li",[t._v("作用范围@Scope")]),t._v(" "),s("li",[t._v("使用@PostConstruct、@PreDestroy 定义 bean 生命周期")])])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Repository")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"singleton"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单例模式，prototype:非单例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BookDaoImpl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BookDao")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BookDaoImpl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PostConstruct")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PreDestroy")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("destroy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("ol",{attrs:{start:"4"}},[s("li",[s("p",[t._v('自动装配：无同名 bean 时直接使用@AutoWired，按类型装配，使用反射里面的暴力反射简化代码书写。有同名 bean 时，1 可以通过按名称装配，在 bean 中使用@Repository("xx")注解的形式区分；2 是使用@Qualifier("beanName")注解的形式开启指定名称装配 bean，直接使用。')]),t._v(" "),s("ul",[s("li",[t._v("注意：自动装配基于反射设计创建对象并暴力反射对应属性为私有属性初始化数据，因此无需提供 setter 方法")]),t._v(" "),s("li",[t._v("注意：自动装配建议使用无参构造方法创建对象（默认），如果不提供对应的构造方法，请提供唯一的构造方法")]),t._v(" "),s("li",[t._v("注意：@Qualifier 注解无法单独使用，必须配合@AutoWired 注解使用")]),t._v(" "),s("li",[t._v("使用@Value 实现简单类型/值类型的注入")])])]),t._v(" "),s("li",[s("p",[t._v("加载外部 properties 文件")]),t._v(" "),s("ul",[s("li",[t._v("使用@PropertySource 注解加载 properties 文件，不支持"),s("code",[t._v("*")]),t._v("文件名")]),t._v(" "),s("li",[t._v("注意：路径仅支持单一文件配置，多文件请使用数组格式配置，不允许使用通配符"),s("code",[t._v("*")])])])]),t._v(" "),s("li",[s("p",[t._v("第三方 bean 管理")]),t._v(" "),s("ul",[s("li",[t._v("使用@Bean 定义一个返回这 bean 实例的方法")]),t._v(" "),s("li",[t._v("将独立的配置类加入核心配置\n"),s("ul",[s("li",[t._v("方式一：导入式，使用@Import 注解手动加入配置类到核心配置，此注解只能添加一次，多个数据使用数组格式。推荐")]),t._v(" "),s("li",[t._v('方式二：扫描式，使用@ComponentScan({"xx.config"})注解扫描配置类所在的包，加载对应的配置类信息。不推荐')])])])])]),t._v(" "),s("li",[s("p",[t._v("第三方 bean 的依赖注入")]),t._v(" "),s("ol",[s("li",[t._v("简单类型：直接使用@Value 注解，相当于变量的形式")]),t._v(" "),s("li",[t._v("引用类型：在@Bean 下定义的方法中定义形参，然后就能直接使用，会自动按类型检测。容器会根据类型自动装配对象。")])])])]),t._v(" "),s("h3",{attrs:{id:"aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[t._v("#")]),t._v(" AOP")]),t._v(" "),s("ul",[s("li",[t._v("基础：")])]),t._v(" "),s("ol",[s("li",[t._v("面向切面编程，一种编程范式，指导开发者如何组织程序结构。作用是在不惊动原始设计的基础上为其进行功能增强。")]),t._v(" "),s("li",[t._v("Spring 倡导无侵入式编程")]),t._v(" "),s("li",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images@master/imgs/20221020143540.png",alt:"AOP核心概念"}})]),t._v(" "),s("li",[t._v("连接点：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等\n"),s("ol",[s("li",[t._v("在 SpringAOP 中，理解为方法的执行")])])]),t._v(" "),s("li",[t._v("切入点：匹配连接点的式子。在 SpringAOP 中，一个切入点可以只描述一个具体方法，也可以匹配多个方法\n"),s("ol",[s("li",[t._v("一个具体方法：某个包下某个接口中的无形参无返回值的某个方法")]),t._v(" "),s("li",[t._v("匹配多个方法：所有的 save 方法，所有的 get 开头的方法，所有的以 Dao 结尾的接口中的任意方法。。")])])]),t._v(" "),s("li",[t._v("通知：在切入点处执行的操作，也就是共性功能\n"),s("ol",[s("li",[t._v("在 SpringAOP 中，功能最终以方法的形式呈现")])])]),t._v(" "),s("li",[t._v("通知类：定义通知的类")]),t._v(" "),s("li",[t._v("切面：描述通知与切入点的对应关系")])]),t._v(" "),s("ul",[s("li",[t._v("实战：")])]),t._v(" "),s("ol",[s("li",[t._v("导包："),s("code",[t._v("org.springframework.spring-context")]),t._v("，"),s("code",[t._v("org.aspectj.aspectjweaver")])]),t._v(" "),s("li",[t._v("保持原来的接口和实现类不变")]),t._v(" "),s("li",[t._v("Spring 的执行程序（main 方法）也不变")]),t._v(" "),s("li",[t._v("SpringConfig 中，增加"),s("code",[t._v("@EnableAspectJAutoProxy")]),t._v("注解，告诉程序我们要用注解开发 AOP")]),t._v(" "),s("li",[t._v("AOP 通知类（自己创建）上，增加"),s("code",[t._v("@Component")]),t._v("注解，告诉 Spring 来加载。增加"),s("code",[t._v("@Aspect")]),t._v("注解，进行关联通知。")]),t._v(" "),s("li",[t._v("在通知类中，新增一个私有的空方法"),s("code",[t._v("pt()")]),t._v("做通知，名字任意，无参无返回值无实际逻辑，使用"),s("code",[t._v("@Pointcut")]),t._v("注解，并传入："),s("code",[t._v('"execution(void com.xxx.BookDao.xx())"')])]),t._v(" "),s("li",[t._v("把切入点（抽出来的函数）与通知绑定，通过"),s("code",[t._v('@Before("pt()")')]),t._v("的形式")]),t._v(" "),s("li",[t._v("SpringAOP 的核心模式就是代理模式")]),t._v(" "),s("li",[t._v("切入点：要进行增强的方法")]),t._v(" "),s("li",[t._v("切入点表达式：要进行增强的方法的描述方式，有两种描述方式：\n"),s("ol",[s("li",[t._v("执行 com.xxx.dao 包下的 BookDao 接口中的无参数 update 方法")]),t._v(" "),s("li",[t._v("执行 com.xxx.dao.impl 包下的 BookDaoImpl 类中的无参数 update 方法")])])]),t._v(" "),s("li",[t._v("切入点表达式标准格式："),s("code",[t._v("动作关键字(访问修饰符 返回值 包名.类/接口名.方法名(参数)异常名)")]),t._v(" "),s("ol",[s("li",[t._v("动作关键字：描述切入点的行为动作。例如 execution 表示执行到指定切入点")]),t._v(" "),s("li",[t._v("访问修饰符：public，private 等可以省略")]),t._v(" "),s("li",[t._v("返回值")]),t._v(" "),s("li",[t._v("包名")]),t._v(" "),s("li",[t._v("类/接口名")]),t._v(" "),s("li",[t._v("方法名")]),t._v(" "),s("li",[t._v("参数")]),t._v(" "),s("li",[t._v("异常名：方法定义中抛出指定异常，可以省略")])])]),t._v(" "),s("li",[t._v("可以使用通配符描述切入点，快速描述\n"),s("ol",[s("li",[s("code",[t._v("*")]),t._v("：单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现，"),s("code",[t._v('@Pointcut("execution(public * com.xxx.*.BookDao.find* (*))")')])]),t._v(" "),s("li",[s("code",[t._v("..")]),t._v("：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写，"),s("code",[t._v("execution(public User com..BookDao.findById (..))")])]),t._v(" "),s("li",[s("code",[t._v("+")]),t._v("：专用于匹配子类类型，"),s("code",[t._v("execution(* *..*Service+.*(..))")])]),t._v(" "),s("li",[t._v("终极写法："),s("code",[t._v("execution(* *..*(..))")]),t._v("，不常用")])])]),t._v(" "),s("li",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images/imgs/20221020220453.png",alt:"20221020220453"}})]),t._v(" "),s("li",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images/imgs/20221020221605.png",alt:"20221020221605"}}),t._v(" "),s("ol",[s("li",[t._v("关键步骤如下：")]),t._v(" "),s("li",[s("code",[t._v("@Around()")])]),t._v(" "),s("li",[s("code",[t._v("Object")])]),t._v(" "),s("li",[s("code",[t._v("Throwable")])]),t._v(" "),s("li",[s("code",[t._v("ProceedingJoinPoint pjp")])]),t._v(" "),s("li",[s("code",[t._v("pjp.proceed()")])]),t._v(" "),s("li",[s("code",[t._v("return ret")])]),t._v(" "),s("li",[t._v("然后填充要做的操作逻辑")])])]),t._v(" "),s("li",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images/imgs/20221020221529.png",alt:"20221020221529"}})]),t._v(" "),s("li",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images/imgs/20221020221629.png",alt:"20221020221629"}})]),t._v(" "),s("li",[s("code",[t._v("Signature sig = pjp.getSignature(); String xx = sig.getDeclaringTypeName()/getName();")]),t._v("获取具体执行的切入点的信息")]),t._v(" "),s("li",[t._v("AOP 通知获取参数数据：\n"),s("ol",[s("li",[t._v("JoinPoint 对象描述了连接点方法的运行状态。可以获取到原始方法的调用参数，用于除了"),s("code",[t._v("@Around")]),t._v("以外的")]),t._v(" "),s("li",[t._v("ProceedJointPoint 是 JointPoint 的子类：用于"),s("code",[t._v("@Around")])])])]),t._v(" "),s("li",[t._v("AOP 通知获取返回值数据：\n"),s("ol",[s("li",[t._v("抛出异常后通知可以获取切入点方法中出现的异常信息，使用形参可以接受对应的异常对象。"),s("code",[t._v('@AfterReturning(value="pt()",returning="ret")')])]),t._v(" "),s("li",[t._v("环绕通知中可以手工书写对原始方法的调用，得到的结果即为原始方法的返回值。")])])]),t._v(" "),s("li",[t._v("AOP 通知获取异常数据（了解）\n"),s("ol",[s("li",[t._v("抛出异常："),s("code",[t._v('@AfterThrowing(value="pt()",throwing="t")')]),t._v("，通过形参"),s("code",[t._v("Throwable t")]),t._v("接收并使用对应的异常对象")]),t._v(" "),s("li",[t._v("抛出异常后通知可以获取切入点方法运行的异常信息，使用形参可以接受运行时抛出的的异常对象，使用"),s("code",[t._v("try{}catch(Throwable t){...}")]),t._v("接受并使用")])])]),t._v(" "),s("li",[t._v("大量的相同的有共性的可以提取出来的方法，可以用 AOP，可以简化大量操作。")])]),t._v(" "),s("h3",{attrs:{id:"spring-事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-事务"}},[t._v("#")]),t._v(" Spring 事务")]),t._v(" "),s("ol",[s("li",[t._v("事务的作用：在数据层保障一系列的数据库操作同成功同失败。")]),t._v(" "),s("li",[t._v("Spring 事务作用：在数据层或业务层保障一系列的数据库操作同成功同失败。")]),t._v(" "),s("li",[s("code",[t._v("interface PlatformTransactionManager")]),t._v("、"),s("code",[t._v("class DataSourceTransactionManager")])]),t._v(" "),s("li",[t._v("使用步骤 3 步：\n"),s("ol",[s("li",[t._v("在业务层接口上添加 Spring 事务管理："),s("code",[t._v("@Transactional")]),t._v("，通常添加在业务层接口而不是业务层实现类中，降低耦合，注解式事务可以添加到业务方法上表示当前方法开启事务，也可以添加到接口上表示当前接口所有方法开启事务")]),t._v(" "),s("li",[t._v("设置事务管理器：通过 "),s("code",[t._v("PlatformTransactionManager")]),t._v(" 新建一个 bean，bean 中返回 "),s("code",[t._v("DataSourceTransactionManager")]),t._v(" 的实例对象。事务管理器要根据实现技术进行选择，MyBatis 框架使用的是 JDBC 事务。")]),t._v(" "),s("li",[t._v("开启注解式事务驱动："),s("code",[t._v("@EnableTransactionManagement")])])])]),t._v(" "),s("li",[t._v("Spring 事务角色：\n"),s("ol",[s("li",[t._v("事务管理员：发起事务方，在 Spring 中通常指代业务层开启事务的方法")]),t._v(" "),s("li",[t._v("事务协调员：加入事务方，在 Spring 中通常指代数据层方法，也可以是业务层方法")])])]),t._v(" "),s("li",[t._v("事务相关配置：一般只在 Error 错误或运行时异常时才会导致事务回滚。有些异常是不会导致事务回滚的，比如 IOException。\n"),s("ol",[s("li",[t._v("如果要加上这种异常，需在"),s("code",[t._v("@Transactional(rollbackFor={IOException.class})")]),t._v("这样配置")]),t._v(" "),s("li",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images@master/imgs/20221021154844.png",alt:"事务相关配置"}})])])]),t._v(" "),s("li",[t._v("事务传播行为：事务协调员对事务管理员所携带事务的处理态度。。。\n"),s("ol",[s("li",[t._v("如果某个接口或方法需要单独开启事务，需在"),s("code",[t._v("@Transactional(propagation=Propagation.REQUIRE_NEW)")]),t._v("这样配置")]),t._v(" "),s("li",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images@master/imgs/20221021155835.png",alt:"事务传播行为"}})])])])]),t._v(" "),s("h2",{attrs:{id:"springmvc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springmvc"}},[t._v("#")]),t._v(" SpringMVC")]),t._v(" "),s("p",[t._v("SpringMVC 技术与 Servlet 技术功能等同，均属于 web 层开发技术。SpringMVC 是一种基于 Java 实现 MVC 模型的轻量级 Web 框架。使用简单，开发便捷（相较于 Servlet）。灵活性强。")]),t._v(" "),s("h3",{attrs:{id:"使用步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用步骤"}},[t._v("#")]),t._v(" 使用步骤")]),t._v(" "),s("ol",[s("li",[t._v("先导入 "),s("code",[t._v("SpringMVC（spring-webmvc）")]),t._v("与"),s("code",[t._v("Servlet（javax.servlet-api）")]),t._v("的坐标（依赖）")]),t._v(" "),s("li",[t._v("创建 SpringMVC 控制器类（等同于 Servlet 功能）\n"),s("ol",[s("li",[t._v("定义访问路径："),s("code",[t._v('@RequestMapping("/xxx")')])]),t._v(" "),s("li",[t._v("定义返回："),s("code",[t._v("@ResponseBody")])])])]),t._v(" "),s("li",[t._v("初始化 SpringMVC 环境（同 Spring 环境）设定 SpringMVC 加载对应的 bean")]),t._v(" "),s("li",[t._v("启动 Tomcat 服务器的时候要保证能加载到服务器的配置，初始化 Servlet 容器。加载 SpringMVC 环境，并设置 SpringMVC 技术处理的请求。\n"),s("ol",[s("li",[t._v("创建一个类，继承"),s("code",[t._v("AbstractDispatcherServletInitializer")]),t._v("并实现它的几个抽象方法。")]),t._v(" "),s("li",[t._v("初始化一个"),s("code",[t._v("AnnotationConfigWebApplicationContext")]),t._v("并注册 SpringMvcConfig.class")]),t._v(" "),s("li",[t._v("在 getServletMappings 方法中设置把所有进入 Tomcat 的请求都交由 SpringMVC 来处理。固定格式"),s("code",[t._v('return new String[]{"/"};')])])])]),t._v(" "),s("li",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images@master/imgs/20221021164054.png",alt:"入门案例总结"}})]),t._v(" "),s("li",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images@master/imgs/20221021164522.png",alt:"入门案例工作流程分析"}})]),t._v(" "),s("li",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images@master/imgs/20221021171118.png",alt:"Controller加载控制与业务bean加载控制"}})]),t._v(" "),s("li",[t._v("乱码处理：重写 "),s("code",[t._v("getServletFilters()")]),t._v("，"),s("code",[t._v('return new Filter[]{new CharacterEncodingFilter().setEncoding("UTF-8")};')])]),t._v(" "),s("li",[t._v("get 请求：在@Controller 中\n"),s("ol",[s("li",[t._v("注解"),s("code",[t._v('@RequestMapping("函数名，也是请求的 path")')])]),t._v(" "),s("li",[t._v("注解"),s("code",[t._v("@ResponseBody")])]),t._v(" "),s("li",[t._v("编写响应函数体，通过形参接收参数，通过"),s("code",[t._v('(@RequestParam("name") String username, ... )')]),t._v("设置参数别名，return 返回响应字符串")])])]),t._v(" "),s("li",[t._v("post 请求：\n"),s("ol",[s("li",[t._v("通过"),s("code",[t._v("x-www-form-urlencoded")]),t._v("发送时，Java 代码和 get 请求一样")])])]),t._v(" "),s("li",[t._v("参数传递：\n"),s("ol",[s("li",[t._v("普通参数如上")]),t._v(" "),s("li",[t._v("POJO 参数：通过实体类来接收，使用时直接以形参注入")]),t._v(" "),s("li",[t._v("嵌套 POJO 参数一样，请求时嵌套属性以 AA.bb 的形式请求")]),t._v(" "),s("li",[t._v("数组参数：多个相同的属性会自动组成数组")]),t._v(" "),s("li",[t._v("集合参数：通过"),s("code",[t._v("@RequestParam List<String> lists")]),t._v("来接收")]),t._v(" "),s("li",[t._v("各种 JSON 数据（包括 POJO，POJO 集合）对象数组等：\n"),s("ol",[s("li",[t._v("添加依赖"),s("code",[t._v("jackson-databind")])]),t._v(" "),s("li",[t._v("SpringMvcConfig 中添加"),s("code",[t._v("@EnableWebMvc")]),t._v("注解")]),t._v(" "),s("li",[t._v("通过"),s("code",[t._v("@RequestBody List<String> lists")]),t._v("来接收")])])])])]),t._v(" "),s("li",[s("code",[t._v("@RequestBody")]),t._v("与"),s("code",[t._v("@RequestParam")]),t._v("的区别：\n"),s("ol",[s("li",[s("code",[t._v("@RequestParam")]),t._v("用于接收 url 地址传参，表单传参"),s("code",[t._v("application/x-www-form-urlencoded")])]),t._v(" "),s("li",[s("code",[t._v("@RequestBody")]),t._v("用于接收 json 数据"),s("code",[t._v("application/json")])]),t._v(" "),s("li",[s("code",[t._v("@PathVariable")]),t._v("用于接收路径参数，使用{参数名称}描述路径参数")]),t._v(" "),s("li",[t._v("开发中，发送 json 格式数据为主，"),s("code",[t._v("@RequestBody")]),t._v("应用较广")]),t._v(" "),s("li",[t._v("如果发送非 json 数据，选用"),s("code",[t._v("@RequestParam")]),t._v("接收请求参数")]),t._v(" "),s("li",[t._v("采用 restful 进行开发，当参数数量较少时，例如 1 个，可以采用"),s("code",[t._v("@PathVariable")]),t._v("接收请求路径变量，通常用于传递 id 值")])])]),t._v(" "),s("li",[t._v("日期型参数接收：提前使用"),s("code",[t._v('@DateFormat(pattern="yyyy-MM-dd") Date date')]),t._v("进行格式约定，否则默认只能接收"),s("code",[t._v("yyyy/MM/dd")]),t._v("格式。底层是通过 Converter 接口重写的 convert 方法实现的转化。")]),t._v(" "),s("li",[t._v("响应：\n"),s("ol",[s("li",[t._v("页面：直接在处理函数中返回页面的相对路径即可，不需要"),s("code",[t._v("@ResponseBody")])]),t._v(" "),s("li",[t._v("数据：\n"),s("ol",[s("li",[t._v("字符串：需要"),s("code",[t._v("@ResponseBody")])]),t._v(" "),s("li",[t._v("JSON：需要"),s("code",[t._v("@ResponseBody")]),t._v("--设置当前控制器返回值作为响应体，返回一个 POJO 对应的对象即可，是 jackson 实现的。是 HttpMessageConverter 接口转的。")])])])])])]),t._v(" "),s("h3",{attrs:{id:"restful-风格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#restful-风格"}},[t._v("#")]),t._v(" RESTful 风格")]),t._v(" "),s("ol",[s("li",[t._v("首先要遵循 restful 风格定义接口")]),t._v(" "),s("li",[t._v("然后借助注解"),s("code",[t._v('@RequestMapping("函数名，也是请求的 path", method=RequestMethod.DELETE)')]),t._v("的第二个参数，定义接口行为")]),t._v(" "),s("li",[t._v("对于路由参数，使用注解"),s("code",[t._v("@PathVariable")]),t._v("接收，同时要做"),s("code",[t._v('@RequestMapping(value="/xxx/{id}")')]),t._v("配置，跟前端路由参数一样。")]),t._v(" "),s("li",[t._v("公共路径前缀通过在函数上添加注解"),s("code",[t._v('@RequestMapping("/commonPath")')]),t._v("实现简化。")]),t._v(" "),s("li",[t._v("同上"),s("code",[t._v("@ResponseBody")]),t._v("注解也可以提取到函数外面，前提是所有响应方法都需要这个注解。")]),t._v(" "),s("li",[t._v("在上面 4+5 中，可以用"),s("code",[t._v("@RestController")]),t._v("代替"),s("code",[t._v("@Controller")]),t._v("和"),s("code",[t._v("@ResponseBody")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v('@RequestMapping(value="", method=RequestMethod.POST)')]),t._v("==="),s("code",[t._v("@PostMapping(...)")]),t._v("，其他几种都有类似简化书写方式。")]),t._v(" "),s("li",[t._v("设置对静态资源的访问放行：")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringMvcSupport")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebMvcConfigurationSupport")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addResourceHandlers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResourceHandlerRegistry")]),t._v(" registry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当访问/pages/???的时候，走/pages目录下的内容")]),t._v("\n      registry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addResourceHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/pages/**"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addResourceLocations")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/pages/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      registry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addResourceHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/js/**"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addResourceLocations")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/js/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      registry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addResourceHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/css/**"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addResourceLocations")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/css/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      registry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addResourceHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/plugins/**"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addResourceLocations")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/plugins/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h2",{attrs:{id:"ssm-整合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssm-整合"}},[t._v("#")]),t._v(" SSM 整合")]),t._v(" "),s("h2",{attrs:{id:"学透-spring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学透-spring"}},[t._v("#")]),t._v(" 学透 Spring")]),t._v(" "),s("h3",{attrs:{id:"sdkman"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sdkman"}},[t._v("#")]),t._v(" sdkman")]),t._v(" "),s("p",[t._v("管理 Java 版本，类似 nvm？也可以管理 Maven、groovy 等。")]),t._v(" "),s("ol",[s("li",[s("code",[t._v('curl -s "https://get.sdkman.io" | bash')]),t._v(": 安装 sdkman")]),t._v(" "),s("li",[s("code",[t._v('source "$HOME/.sdkman/bin/sdkman-init.sh"')]),t._v(": 刷新环境变量，可以直接加到你的 shell 配置文件（比如 ~/.bash_profile、~/.zshrc 等）中，以便每次打开新终端时自动初始化 sdkman。")]),t._v(" "),s("li",[s("code",[t._v("sdk version")])]),t._v(" "),s("li",[s("code",[t._v("sdk list java")]),t._v(": 获取当前操作系统可用的 JDK 信息")]),t._v(" "),s("li",[s("code",[t._v("sdk install java 11.0.18")]),t._v(": 安装特定版本 JDK")]),t._v(" "),s("li",[s("code",[t._v("sdk install java 14.0.1 /Library/Java/JavaVirtualMachines/jdk-14.0.1.jdk/Contents/Home")]),t._v(": 关联本地已安装 JDK")]),t._v(" "),s("li",[s("code",[t._v("sdk default java 11.0.18")]),t._v(": 设置默认版本（感觉并不管用，还得去改.zshrc 才会生效）")]),t._v(" "),s("li",[s("code",[t._v("sdk use java 11.0.18")]),t._v(": 使用某个 jdk 版本")]),t._v(" "),s("li",[s("code",[t._v("sdk uninstall java 8.0.252-open")]),t._v(": 移除 SDKMAN 中的某个特定版本")]),t._v(" "),s("li",[s("code",[t._v("sudo rm -rf /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk")]),t._v(": 移除本地 jdk 版本")]),t._v(" "),s("li",[s("code",[t._v("ls /Library/Java/JavaVirtualMachines/")]),t._v(": Mac 上通过 .dmg 文件安装的 JDK 一般会在这个目录下")]),t._v(" "),s("li",[s("code",[t._v("sudo rm -rf /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk")]),t._v(": 使用 rm 命令来删除对应的 JDK 目录")]),t._v(" "),s("li",[s("code",[t._v("sdk install maven")]),t._v(": 安装 Maven，安装前要确保已正确安装 JDK")]),t._v(" "),s("li",[t._v("Maven 镜像仓库，阿里云："),s("code",[t._v("https://maven.aliyun.com/")]),t._v("，按使用指南修改 Maven 安装目录下的"),s("code",[t._v("conf/settings.xml")]),t._v("文件；也可以在用户目录的"),s("code",[t._v(".m2")]),t._v("子目录中创建"),s("code",[t._v("settings.xml")]),t._v("文件，并设置相应配置内容。")]),t._v(" "),s("li",[s("code",[t._v("/Users/eric/.sdkman/candidates/maven/3.9.1/conf/settings.xml")]),t._v(": 配置举例")]),t._v(" "),s("li",[s("code",[t._v("brew cask install intellij-idea-ce")]),t._v(": 安装 idea 社区版或直接去官网下载")]),t._v(" "),s("li",[s("code",[t._v("IDEA->Help->Edit Custom VW Options")]),t._v("，在打开的 idea.vmoptions 文件中调整-Xms 和-Xmx 等 JVM 相关参数，让 ide 流畅运行")]),t._v(" "),s("li",[t._v("通过"),s("a",{attrs:{href:"https://start.spring.io",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("Spring Initializr"),s("OutboundLink")],1),t._v("创建工程，打开网页，填写项目信息，点击生成，下载 helloworld.zip 压缩包")]),t._v(" "),s("li",[t._v("Maven 设置 sdkman 的 settings.xml 为全局公用配置：\n"),s("ol",[s("li",[t._v("在"),s("code",[t._v(".zshrc")]),t._v("中设置环境变量：一般来说 sdkman 默认安装的位置都是一样的")])]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("SDKMAN_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("/.sdkman\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("M2_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$SDKMAN_DIR")]),t._v("/candidates/maven/current\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[s("code",[t._v("mkdir -p $M2_HOME/conf")]),t._v("，如果没有权限则"),s("code",[t._v("sudo chown -R $USER $M2_HOME")])]),t._v(" "),s("li",[s("code",[t._v("cp /path/to/your/settings.xml $M2_HOME/conf/")])]),t._v(" "),s("li",[t._v("这样当你切换 Maven 版本之后，也依然会使用公用的 settings")])])])]),t._v(" "),s("h3",{attrs:{id:"快速新建一个-spring-boot-项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速新建一个-spring-boot-项目"}},[t._v("#")]),t._v(" 快速新建一个 spring-boot 项目")]),t._v(" "),s("ol",[s("li",[t._v("在这个"),s("a",{attrs:{href:"https://start.spring.io/",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("网站"),s("OutboundLink")],1),t._v("选择配置，作用可以理解为前端的 vue-cli、create-react-app 等脚手架，选好配置依赖之后下载；")]),t._v(" "),s("li",[t._v("idea 中打开刚才下载的项目")]),t._v(" "),s("li")])])}),[],!1,null,null,null);a.default=n.exports}}]);