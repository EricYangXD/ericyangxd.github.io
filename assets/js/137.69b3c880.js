(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{812:function(e,a,t){"use strict";t.r(a);var i=t(7),r=Object(i.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"tree-shaking-定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking-定义"}},[e._v("#")]),e._v(" Tree Shaking 定义")]),e._v(" "),t("ul",[t("li",[e._v("利用 ES Module 可以进行静态分析的特点来检测模块内容的导出、导入以及被使用的情况，保留 Live Code。")]),e._v(" "),t("li",[e._v("Rollup 对 Tree-shaking 的定义已经不仅仅是 ES Module 相关，此外它还支持了 DCE -- 消除不会被执行和没有副作用（Side Effect） 的 Dead Code，即 DCE 过程。")]),e._v(" "),t("li",[e._v("Tree Shaking 指基于 ES Module 进行静态分析，通过 AST 将用不到的函数进行移除，从而减小打包体积。")])]),e._v(" "),t("h3",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[e._v("#")]),e._v(" 原理")]),e._v(" "),t("ul",[t("li",[e._v("ESM 要求所有的导入导出语句只能出现在模块顶层，且导入导出的模块名必须为字符串常量，所以，ESM 下模块之间的依赖关系是高度确定的，与运行状态无关，编译工具只需要对 ESM 模块做静态分析，就可以从代码字面量中推断出哪些模块值未曾被其它模块使用，这是实现 Tree Shaking 技术的必要条件。")]),e._v(" "),t("li",[e._v("webpack5 已经自带了这个功能了，当打包环境为 production 时，默认开启 tree-shaking 功能。")])]),e._v(" "),t("h3",{attrs:{id:"在-webpack-中实现-tree-shaking-的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在-webpack-中实现-tree-shaking-的原理"}},[e._v("#")]),e._v(" 在 Webpack 中实现 Tree Shaking 的原理")]),e._v(" "),t("p",[e._v("Webpack 中，Tree-shaking 的实现一是「先标记出模块导出值中哪些没有被用过」，二是「使用 Terser、UglifyJS 等 DCE 工具删掉这些没被用到的导出语句」。标记过程大致可划分为三个步骤：")]),e._v(" "),t("ol",[t("li",[e._v("Make 阶段，收集模块导出变量并记录到模块依赖关系图 ModuleGraph 变量中")]),e._v(" "),t("li",[e._v("Seal 阶段，遍历 ModuleGraph 标记模块导出变量有没有被使用")]),e._v(" "),t("li",[e._v("生成产物时，若变量没有被其它模块使用则删除对应的导出语句")])]),e._v(" "),t("h2",{attrs:{id:"使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[e._v("#")]),e._v(" 使用")]),e._v(" "),t("ol",[t("li",[e._v("使用>= ES2015 模块语法（即 import 和 export）")]),e._v(" "),t("li",[e._v("确保没有编译器将 ES2015 模块语法转换为 CommonJS 的（这是现在常用的@babel/preset-env 的默认行为）")]),e._v(" "),t("li",[e._v('在项目的 package.json 文件中，添加"sideEffects"："false"属性')]),e._v(" "),t("li",[e._v('使用 mode 为"production"的配置项以启用更多优化项，包括压缩代码与 tree shaking')])]),e._v(" "),t("h3",{attrs:{id:"在-webpack-中启动-tree-shaking"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在-webpack-中启动-tree-shaking"}},[e._v("#")]),e._v(" 在 Webpack 中启动 Tree Shaking")]),e._v(" "),t("p",[e._v("在 Webpack 中，启动 Tree Shaking 功能必须同时满足三个条件：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("使用 ESM 规范编写模块代码")])]),e._v(" "),t("li",[t("p",[e._v("配置 optimization.usedExports 为 true，启动标记功能")])]),e._v(" "),t("li",[t("p",[e._v("启动代码优化功能，可以通过如下方式实现：")]),e._v(" "),t("ul",[t("li",[e._v("配置 mode = production")]),e._v(" "),t("li",[e._v("配置 optimization.minimize = true")]),e._v(" "),t("li",[e._v("提供 optimization.minimizer 数组")])])])]),e._v(" "),t("h2",{attrs:{id:"tips"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[e._v("#")]),e._v(" tips")]),e._v(" "),t("ol",[t("li",[e._v("当使用语法 import * 时，Tree Shaking 依然生效。")]),e._v(" "),t("li",[e._v("Tree Shaking 甚至可对 JSON 进行优化。原理是因为 JSON 格式简单，通过 AST 容易预测结果，不像 JS 对象有复杂的类型与副作用。")]),e._v(" "),t("li",[e._v("为了减小生产环境体积，我们可以使用一些支持 ES 的 package，比如使用 lodash-es 替代 lodash。")]),e._v(" "),t("li",[e._v("我们可以在 "),t("a",{attrs:{href:"//npm.devtool.tech"}},[e._v("npm.devtool.tech")]),e._v(" (opens new window)中查看某个库是否支持 Tree Shaking。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);