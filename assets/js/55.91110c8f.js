(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{735:function(s,e,t){"use strict";t.r(e);var a=t(8),r=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"什么是-docker-安装-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-docker-安装-docker"}},[s._v("#")]),s._v(" 什么是 Docker & 安装 Docker")]),s._v(" "),t("p",[s._v("Docker 的介绍，里面包括了 3 个基本概念：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("docker 主要由镜像和容器构成")]),s._v(" "),t("ul",[t("li",[s._v("镜像（Image）:docker 镜像好比一个模板，相当于一个文件系统")]),s._v(" "),t("li",[s._v("容器（Container）:容器需要通过镜像来创建。镜像和容器就像是面向对象中的类和实例一样。容器可以被创建/启动/停止/删除等")]),s._v(" "),t("li",[s._v("仓库（Repository）:仓库就是存放镜像的地方，分为私有仓库和公有仓库。类似 git")])])]),s._v(" "),t("li",[t("p",[s._v("docker 的运行原理")])])]),s._v(" "),t("p",[s._v("docker 是一个 Client-Server 结构的系统，docker 的守护进程运行在主机上，通过 socket 从客户端访问。dockerServer 接收到 dockerClient 的指令，就会执行这个命令。")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[s._v("docker 的安装")]),s._v(" "),t("ul",[t("li",[s._v("homebrew 的 cask 支持 Docker for Mac，所以可以直接安装 "),t("code",[s._v("brew cask install docker")])]),s._v(" "),t("li",[s._v("也可以直接到官网下载，"),t("code",[s._v("https://download.docker.com/mac/stable/Docker.dmg")])]),s._v(" "),t("li",[s._v("docker 的参考文档："),t("code",[s._v("https://docs.docker.com")])]),s._v(" "),t("li",[s._v("dockerhub 查找镜像源地址："),t("code",[s._v("https://hub.docker.com")])]),s._v(" "),t("li",[s._v("查看 docker 安装包："),t("code",[s._v("yum list | grep docker")])]),s._v(" "),t("li",[s._v("安装 Docker Ce 社区版本："),t("code",[s._v("yum install -y docker-ce.x86_64")])]),s._v(" "),t("li",[s._v("设置开机启动："),t("code",[s._v("systemctl enable docker")])]),s._v(" "),t("li",[s._v("更新 xfsprogs："),t("code",[s._v("yum -y update xfsprogs")])]),s._v(" "),t("li",[s._v("启动 docker："),t("code",[s._v("sudo systemctl start docker")])]),s._v(" "),t("li",[s._v("查看版本："),t("code",[s._v("docker version")])]),s._v(" "),t("li",[s._v("查看详细信息："),t("code",[s._v("docker info")])]),s._v(" "),t("li",[s._v("Centos7 一键安装："),t("code",[s._v("curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun")]),s._v("或"),t("code",[s._v("curl -sSL https://get.daocloud.io/docker | sh")])]),s._v(" "),t("li",[s._v("新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。此后可从仓库安装和更新 Docker。\n"),t("ul",[t("li",[t("code",[s._v("sudo yum install -y yum-utils \\")])]),s._v(" "),t("li",[t("code",[s._v("device-mapper-persistent-data \\")])]),s._v(" "),t("li",[t("code",[s._v("lvm2")])]),s._v(" "),t("li",[t("code",[s._v("sudo yum-config-manager \\")])]),s._v(" "),t("li",[t("code",[s._v("--add-repo \\")])]),s._v(" "),t("li",[t("code",[s._v("https://download.docker.com/linux/centos/docker-ce.repo")])])])]),s._v(" "),t("li",[s._v("阿里云："),t("code",[s._v("http:**//mirrors.aliyun.com/docker-ce/linux/centos/**docker-ce.repo")])]),s._v(" "),t("li",[s._v("清华大学源："),t("code",[s._v("https:**//mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/**docker-ce.repo")])]),s._v(" "),t("li",[s._v("手动安装："),t("code",[s._v("sudo yum install -y docker-ce docker-ce-cli containerd.io")])])])])]),s._v(" "),t("h2",{attrs:{id:"docker-daemon"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-daemon"}},[s._v("#")]),s._v(" Docker Daemon")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Docker Daemon 是 Docker 架构中运行在后台的守护进程，可分为 Docker Server、Engine 和 Job 三部分。")])]),s._v(" "),t("li",[t("p",[s._v("Docker Daemon 是通过 Docker Server 模块接受 Docker Client 的请求，并在 Engine 中处理请求，然后根据请求类型，创建出指定的 Job 并运行，运行过程的几种可能：向 Docker Registry 获取镜像，通过 graphdriver 执行容器镜像的本地化操作，通过 networkdriver 执行容器网络环境的配置，通过 execdriver 执行容器内部运行的执行工作等。")])]),s._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images@master/imgs/docker-brew.jpg",target:"_blank",rel:"nofollow noopener noreferrer"}},[s._v("启动 docker daemon"),t("OutboundLink")],1)])]),s._v(" "),t("li",[t("p",[s._v("Linux 上配置 Docker 源镜像加速："),t("code",[s._v("vi /etc/docker/daemon.json")])])]),s._v(" "),t("li",[t("p",[s._v("Docker Desktop 上直接在设置的"),t("code",[s._v("Docker Engine")]),s._v("里配置 Docker 源镜像加速")])])]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2024-12-11 更新")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"builder"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"gc"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"defaultKeepStorage"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"20GB"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"enabled"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"experimental"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"features"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"buildkit"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"registry-mirrors"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.hpcloud.cloud"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.m.daocloud.io"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.unsee.tech"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.1panel.live"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://mirrors.ustc.edu.cn"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.chenby.cn"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://mirror.azure.cn"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://dockerpull.org"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://dockerhub.icu"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://hub.rat.dev"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.1panel.dev"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.fxxk.dedyn.io"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.xn--6oq72ry9d5zx.cn"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.zhai.cm"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.5z5f.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://a.ussh.net"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.cloudlayer.icu"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://hub.littlediary.cn"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://hub.crdz.gq"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.kejilion.pro"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://registry.dockermirror.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://dhub.kubesre.xyz"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.nastool.de"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.udayun.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.rainbond.cc"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://hub.geekery.cn"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://docker.1panelproxy.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://atomhub.openatom.cn"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br")])]),t("ul",[t("li",[s._v("配置镜像源之后需要重启 Docker："),t("code",[s._v("sudo systemctl daemon-reload && sudo systemctl restart docker")])]),s._v(" "),t("li",[s._v("查看是否成功："),t("code",[s._v("docker info")])])]),s._v(" "),t("h2",{attrs:{id:"docker-的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-的使用"}},[s._v("#")]),s._v(" Docker 的使用")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("查看版本")]),s._v(" "),t("ul",[t("li",[s._v("docker --version")]),s._v(" "),t("li",[s._v("docker-compose --version")]),s._v(" "),t("li",[s._v("docker-machine --version")])])]),s._v(" "),t("li",[t("p",[s._v("查看 docker 系统信息（包括镜像和容器的数量等）")]),s._v(" "),t("ul",[t("li",[s._v("docker info")])])]),s._v(" "),t("li",[t("p",[s._v("帮助命令")]),s._v(" "),t("ul",[t("li",[s._v("docker help")])])]),s._v(" "),t("li",[t("p",[s._v("查看 cpu 的状况")]),s._v(" "),t("ul",[t("li",[s._v("docker stats")])])])]),s._v(" "),t("h2",{attrs:{id:"docker-的基本命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-的基本命令"}},[s._v("#")]),s._v(" docker 的基本命令")]),s._v(" "),t("ol",[t("li",[s._v("镜像相关命令：")])]),s._v(" "),t("ul",[t("li",[s._v("查看镜像可用版本（nginx 为例）"),t("code",[s._v("docker search nginx")])])]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("下载一个镜像")])]),s._v(" "),t("p",[t("code",[s._v("docker pull nginx:latest（：后面跟镜像版本）")])]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("运行一个 nginx 服务器")])]),s._v(" "),t("p",[t("code",[s._v("docker run -d -p 81:80 --name webserver nginx")])]),s._v(" "),t("p",[s._v("可选项：")]),s._v(" "),t("ul",[t("li",[s._v("--name webserver ：容器名称，用来区分容器")]),s._v(" "),t("li",[s._v("-p 81:80 ：端口进行映射，将本地的 81 端口映射到容器内部的 80 端口")]),s._v(" "),t("li",[s._v("-v ～/nginx/html:/usr/share/nginx/html 数据卷挂载 ro/rw，将主机项目中的目录挂载到容器的目录下，默认 rw 只能在宿主机外改变，容器内部不能改变")]),s._v(" "),t("li",[s._v("-d：设置容器在后台一直运行")]),s._v(" "),t("li",[s._v("-it：使用交互方式运行，进入容器查看内容")]),s._v(" "),t("li",[s._v("-P：随机端口")]),s._v(" "),t("li",[s._v("-e：环境配置设置")]),s._v(" "),t("li",[s._v("注意：后台启动运行，必须要有一个前台进程，docker 发现没有应用，就会自动停止")]),s._v(" "),t("li",[s._v("重点：数据卷挂载分为具名/匿名/指定路径挂载，容器数据卷挂载可以实现数据共享，容器的持久化和同步操作，可以使用 "),t("code",[s._v("docker volume")]),s._v(" 查看卷的情况，可以使用 volumes-from 实现多个容器之间的数据共享。")])]),s._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[s._v("停止 nginx 服务")])]),s._v(" "),t("p",[t("code",[s._v("docker stop webserver(容器id)")])]),s._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[s._v("删除 nginx 服务")])]),s._v(" "),t("p",[t("code",[s._v("docker rm webserver")])]),s._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[s._v("启动/重启 nginx 服务")])]),s._v(" "),t("p",[t("code",[s._v("docker start/restart webserver")])]),s._v(" "),t("ol",{attrs:{start:"7"}},[t("li",[s._v("列出所有镜像(列表包含了 仓库名、标签、镜像 ID、创建时间 以及 所占用的空间)")])]),s._v(" "),t("p",[t("code",[s._v("docker images ls")])]),s._v(" "),t("p",[s._v("说明：")]),s._v(" "),t("ul",[t("li",[s._v("REPOSITORY 镜像的仓库源")]),s._v(" "),t("li",[s._v("TAG 镜像的标签")]),s._v(" "),t("li",[s._v("IMAGE ID 镜像的 id")]),s._v(" "),t("li",[s._v("CREATED 镜像的创建时间")]),s._v(" "),t("li",[s._v("SIZE 镜像的大小")])]),s._v(" "),t("p",[s._v("可选项：")]),s._v(" "),t("ul",[t("li",[s._v("-a：列出所有的镜像")]),s._v(" "),t("li",[s._v("-q：只显示镜像的 id")])]),s._v(" "),t("p",[s._v("注意：镜像 ID 是唯一标识，一个镜像可以对应多个标签")]),s._v(" "),t("ol",[t("li",[s._v("查看镜像、容器、数据卷所占用的空间")])]),s._v(" "),t("p",[t("code",[s._v("docker system df")])]),s._v(" "),t("ol",{attrs:{start:"9"}},[t("li",[t("p",[s._v("删除镜像")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("指定镜像："),t("code",[s._v("docker rmi [镜像名称/镜像短ID/镜像长ID/镜像摘要]")])])]),s._v(" "),t("li",[t("p",[s._v("多个镜像："),t("code",[s._v("docker rmi 镜像ID 镜像ID 镜像ID")])])]),s._v(" "),t("li",[t("p",[s._v("全部镜像："),t("code",[s._v("docker rmi $(docker images -aq)")])])])])]),s._v(" "),t("li",[t("p",[s._v("删除 docker images ls 命令配合 删除所有仓库名为 redis 的镜像")])])]),s._v(" "),t("p",[t("code",[s._v("docker rmi $(docker images ls -q redis)")])]),s._v(" "),t("ol",{attrs:{start:"11"}},[t("li",[s._v("查看镜像运行记录")])]),s._v(" "),t("p",[t("code",[s._v("docker history 镜像id")])]),s._v(" "),t("ol",{attrs:{start:"12"}},[t("li",[s._v("summary：\n"),t("ul",[t("li",[s._v("查看本地镜像："),t("code",[s._v("docker images")])]),s._v(" "),t("li",[s._v("搜索镜像："),t("code",[s._v("docker search centos")])]),s._v(" "),t("li",[s._v("搜索镜像并过滤是官方的： "),t("code",[s._v('docker search --filter "is-official=true" centos')])]),s._v(" "),t("li",[s._v("搜索镜像并过滤大于多少颗星星的："),t("code",[s._v("docker search --filter stars=10 centos")])]),s._v(" "),t("li",[s._v("下载 centos7 镜像："),t("code",[s._v("docker pull centos:7")])]),s._v(" "),t("li",[s._v("修改本地镜像名字（小写）："),t("code",[s._v("docker tag centos:7 mycentos:1")])]),s._v(" "),t("li",[s._v("本地镜像的删除："),t("code",[s._v("docker rmi centos:7")])])])])]),s._v(" "),t("h2",{attrs:{id:"容器相关命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器相关命令"}},[s._v("#")]),s._v(" 容器相关命令")]),s._v(" "),t("ol",[t("li",[s._v("列出容器")])]),s._v(" "),t("p",[t("code",[s._v("docker ps")])]),s._v(" "),t("p",[s._v("可选项：")]),s._v(" "),t("ul",[t("li",[s._v("-a：显示所有的容器，包括未运行的")]),s._v(" "),t("li",[s._v("-l：显示最近创建的容器")]),s._v(" "),t("li",[s._v("-n：列出最近创建的 n 个容器")]),s._v(" "),t("li",[s._v("-q：只显示容器的编号")])]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("进入容器")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker exec -it [容器名称] /bin/bash")])]),s._v(" "),t("li",[t("code",[s._v("docker atthch 容器id")])])])])]),s._v(" "),t("p",[s._v("区别："),t("code",[s._v("docker exec")]),s._v("用于在运行中的容器中执行命令，进入容器后开启一个新的终端，可以在里面操作；"),t("code",[s._v("docker attach")]),s._v("进入容器正在执行的终端，不会启动新的进程")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[s._v("退出容器")]),s._v(" "),t("ul",[t("li",[s._v("容器停止退回主机 "),t("code",[s._v("exit")])]),s._v(" "),t("li",[s._v("容器不停止退出 "),t("code",[s._v("ctrl+p+q")])])])]),s._v(" "),t("li",[t("p",[s._v("删除容器")]),s._v(" "),t("ul",[t("li",[s._v("指定容器："),t("code",[s._v("docker rm [容器id]")])]),s._v(" "),t("li",[s._v("多个容器："),t("code",[s._v("docker rm 容器id 容器id 容器id")])]),s._v(" "),t("li",[s._v("所有容器："),t("code",[s._v("docker rm $(docker ps -aq) docker ps -a -q|xargs docker rm")])])])])]),s._v(" "),t("p",[s._v("注意：不能删除正在运行的容器，要删除正在运行的容器需要加 -f 参数，"),t("code",[s._v("docker rm -f 容器id")])]),s._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[t("p",[s._v("启动/重启容器")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker start/restart 容器id")]),s._v(":只运行 container 不进入命令行")]),s._v(" "),t("li",[t("code",[s._v("docker start -i 74cb2f9141728b8")]),s._v(":运行 container 并进入命令行")])])]),s._v(" "),t("li",[t("p",[s._v("停止/强制停止容器")])])]),s._v(" "),t("p",[t("code",[s._v("docker stop/kill 容器id")])]),s._v(" "),t("ol",{attrs:{start:"7"}},[t("li",[s._v("查看容器日志")])]),s._v(" "),t("p",[t("code",[s._v("docker logs -f -t --tail 100 容器id")])]),s._v(" "),t("ul",[t("li",[s._v("--tail 后面必须加参数条数")])]),s._v(" "),t("ol",{attrs:{start:"8"}},[t("li",[s._v("查看容器中的进程信息")])]),s._v(" "),t("p",[t("code",[s._v("docker top 容器id")])]),s._v(" "),t("ol",{attrs:{start:"9"}},[t("li",[s._v("查看容器的元数据（重要命令）")])]),s._v(" "),t("p",[t("code",[s._v("docker inspect 容器id")])]),s._v(" "),t("ol",{attrs:{start:"10"}},[t("li",[s._v("从容器上拷贝数据到主机上")])]),s._v(" "),t("p",[t("code",[s._v("docker cp 容器id:容器内路径 主机路径")])]),s._v(" "),t("ol",{attrs:{start:"11"}},[t("li",[t("p",[s._v("查看一个容器中 Linux 的版本")]),s._v(" "),t("ul",[t("li",[t("ol",[t("li",[t("code",[s._v("docker exec -it [containerId/containerName] /bin/sh")])])])]),s._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[t("code",[s._v("cat /etc/*-release")])])])])])])]),s._v(" "),t("h2",{attrs:{id:"dockerfile-的指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-的指令"}},[s._v("#")]),s._v(" Dockerfile 的指令")]),s._v(" "),t("p",[s._v("Dockerfile 是一个文本文件，里面包含了一系列的指令，用于定义如何构建一个 Docker 镜像（Image）。它是 Docker 的核心组件之一，是自动化构建 Docker 镜像的重要工具。")]),s._v(" "),t("p",[s._v("通过编写 Dockerfile，开发者可以按照需求定义一个镜像的环境、依赖、配置和运行方式，从而生成可移植、轻量级、统一的应用程序运行环境。")]),s._v(" "),t("ul",[t("li",[s._v("FROM 指令：指定构建容器镜像时的基础镜像，一切从这里开始")]),s._v(" "),t("li",[s._v("MAINTAINER 镜像的作者 姓名<邮箱>")]),s._v(" "),t("li",[s._v("RUN 在镜像构建过程中执行一条命令。")]),s._v(" "),t("li",[s._v("ADD <源路径> <目标路径>：将构建上下文中的文件复制到镜像中。ADD 和 COPY 都可以用于复制文件，但 ADD 功能更复杂，可以解压归档文件（如 .tar.gz）和下载 URL。")]),s._v(" "),t("li",[s._v("WORKDIR 指定容器内的/镜像的工作目录（类似于进入一个目录），后续的指令会以这个目录为上下文。")]),s._v(" "),t("li",[s._v("VOLUME 挂载的目录")]),s._v(" "),t("li",[s._v("EXPOST 端口配置")]),s._v(" "),t("li",[s._v("EXPOSE <端口号>：声明容器监听的端口（只是一个文档性指令，不会自动开放端口）。")]),s._v(" "),t("li",[s._v('CMD ["可执行文件", "参数 1", "参数 2"]： 指定容器启动时要运行的命令。如果同时定义了多个 CMD，只有最后一个会生效，可被覆盖 。')]),s._v(" "),t("li",[s._v('ENTRYPOINT ["可执行文件", "参数 1", "参数 2"]：指定这个容器启动要运行的命令，可以追加命令。与 CMD 类似，但不会被用户的命令覆盖，而是将用户的命令作为参数附加到 ENTRYPOINT 后。')]),s._v(" "),t("li",[s._v("ONBUILD 当构建一个被继承的 Dockerfile 时会运行")]),s._v(" "),t("li",[s._v("COPY <源路径> <目标路径>：类似 ADD，将文件拷贝到镜像中")]),s._v(" "),t("li",[s._v("ENV <变量名>=<值>：构建的时候设置环境变量")])]),s._v(" "),t("p",[s._v("Demo1：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# FROM node:latest")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node:alpine # 是一个官方的轻量化 Node.js 基础镜像，它基于 Alpine Linux，体积小，性能高，更适合生产环境，启动快，内存占用低。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" NODE_ENV=production")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" PORT=8080")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app  # 这里将 /app 作为容器内的工作目录。后续的所有命令（如文件添加、执行等）都将在 /app 目录下运行。如果目录 /app 不存在，WORKDIR 会自动创建它。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt-get update && apt-get install -y nginx       # 使用 apt 安装 Nginx")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" pip install -r requirements.txt                 # 使用 pip 安装 Python 依赖")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" package*.json ./  # 将文件从构建上下文（本地机器的代码目录）复制到镜像内的工作目录（WORKDIR）。在构建镜像时，只复制依赖配置文件以减少构建时间。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" npm install  # 在镜像构建过程中执行命令。依赖包会被安装到 /app/node_modules 中。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . .  # 将上下文目录中的所有文件（. 指代当前目录）复制到容器的 /app 目录中。第一个`.`：本地上下文目录（Dockerfile 所在的目录）。第二个`.`：容器内的工作目录，前面通过 WORKDIR /app 设置为 /app。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ADD app.tar.gz /app   # 解压 app.tar.gz 到镜像的 /app 目录")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),s._v("]  # 运行 npm start")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CMD node index.js")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("h2",{attrs:{id:"dockerignore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerignore"}},[s._v("#")]),s._v(" .dockerignore")]),s._v(" "),t("p",[s._v("用来忽略相应文件：使用 .dockerignore 文件可以避免将不必要的文件（如 .git 文件夹、日志、临时文件等）复制到镜像中。类似.gitignore。")]),s._v(" "),t("h2",{attrs:{id:"dockerfile-demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-demo"}},[s._v("#")]),s._v(" DockerFile Demo")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node:16-alpine "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" builder")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" maintainer="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"developer@example.com"')]),s._v(" version="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.0"')])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /code")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" package.json package-lock.json /code/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" npm install")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /code")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" npm run build")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 选择更小体积的基础镜像")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" nginx:alpine")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将构建产物移至 nginx 中")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("builder")])]),s._v(" code/build/ /usr/share/nginx/html/")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[s._v("使用 docker build 构建镜像并把它跑起来。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 构建镜像")]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" fe-app "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -t fe-app为镜像命名为fe-app，.：表示当前目录包含 Dockerfile。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行容器")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1.以交互模式启动，用户可以直接进入容器终端与容器内部环境进行交互。容器停止后会自动删除，不会保留运行记录，也不会生成新的容器 ID。适合运行临时处理的任务，比如在容器内执行某个脚本，任务完成后直接销毁容器。非常适合需要进入容器交互式操作的场景，比如测试某些命令是否正常运行，检查容器环境等。实时输出容器日志到终端。")]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--rm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v(":3000/tcp fe-app /bin/bash\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2.以守护进程模式启动，容器会在后台运行，用户无法直接进入容器终端与容器内部环境进行交互。容器停止后不会自动删除，会保留运行记录，会生成新的容器 ID。主机的 3000 端口将转发到容器的 3000 端口，因此可以通过访问主机的 http://localhost:3000 来访问容器中的服务。后台运行的模式适合需要高可用的生产环境服务。适合运行 Web 应用、API 服务等长期运行的服务。不输出日志，需要通过 docker logs 查看。必须指定端口映射")]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v(":3000/tcp "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" my-node-app base-node-app\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" my-node-app /bin/bash\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("上述的 1 和 2 差不多，只是一个是交互式的，一个是后台运行的。")]),s._v(" "),t("h2",{attrs:{id:"mac-彻底删除-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mac-彻底删除-docker"}},[s._v("#")]),s._v(" MAC 彻底删除 docker")]),s._v(" "),t("p",[s._v("解决 docker 一直 starting 的问题。")]),s._v(" "),t("p",[s._v('安装 docker for mac 之后，直接在应用程序将 docker 卸载了，再次安装的时候发现 docker 启动不了，一直处于"docker is starting"状态，这时候需要彻底卸载 docker。')]),s._v(" "),t("p",[s._v("如果使用 docker.dmg 或者"),t("code",[s._v("brew cask install docker")]),s._v("安装的 docker，需要删除"),t("code",[s._v("/usr/local/bin/docker")]),s._v("文件夹下 docker 的组件：")]),s._v(" "),t("p",[s._v("命令："),t("code",[s._v("rm -rf /usr/local/bin/docker*")]),s._v(" （谨慎使用）")]),s._v(" "),t("p",[s._v("或者手动进入"),t("code",[s._v("/usr/local/bin/")]),s._v("文件夹下删除相关文件（推荐）。")]),s._v(" "),t("p",[s._v("再次安装 docker 就启动就正常了。")]),s._v(" "),t("ol",[t("li",[t("p",[t("code",[s._v("/Applications/Docker.app/Contents/MacOS/Docker --uninstall")])])]),s._v(" "),t("li",[t("p",[s._v("To uninstall Docker Desktop from your Mac:")]),s._v(" "),t("ul",[t("li",[s._v("From the Docker menu, select Troubleshoot and then select Uninstall.")]),s._v(" "),t("li",[s._v("Click Uninstall to confirm your selection.")])])]),s._v(" "),t("li",[t("p",[s._v("进入 docker 的安装目录: "),t("code",[s._v("which docker")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("cd /usr/local/bin/")])]),s._v(" "),t("li",[s._v("删除与 docker 相关的文件夹")]),s._v(" "),t("li",[t("code",[s._v("sudo rm -rf docker*")])]),s._v(" "),t("li",[t("code",[s._v("sudo rm -rf com.docker.*")])]),s._v(" "),t("li",[t("code",[s._v("sudo rm -rf hub-tool*")])]),s._v(" "),t("li",[t("code",[s._v("sudo rm -rf kube*")])]),s._v(" "),t("li",[t("code",[s._v("sudo rm -rf vpnkit*")])])])])]),s._v(" "),t("h2",{attrs:{id:"learn-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#learn-docker"}},[s._v("#")]),s._v(" Learn Docker")]),s._v(" "),t("h3",{attrs:{id:"_1-基础启动命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基础启动命令"}},[s._v("#")]),s._v(" 1. 基础启动命令")]),s._v(" "),t("ol",[t("li",[s._v("docker 启动命令, docker 重启命令, docker 关闭命令")])]),s._v(" "),t("ul",[t("li",[s._v("启动 "),t("code",[s._v("systemctl start docker")])]),s._v(" "),t("li",[s._v("守护进程重启 "),t("code",[s._v("sudo systemctl daemon-reload")])]),s._v(" "),t("li",[s._v("重启 docker 服务 "),t("code",[s._v("systemctl restart docker")])]),s._v(" "),t("li",[s._v("重启 docker 服务 "),t("code",[s._v("sudo service docker restart")])]),s._v(" "),t("li",[s._v("关闭 docker "),t("code",[s._v("service docker stop")])]),s._v(" "),t("li",[s._v("关闭 docker "),t("code",[s._v("systemctl stop docker")])])]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("如何启动应用")])]),s._v(" "),t("p",[s._v("启动："),t("code",[s._v("docker start 应用（容器container）名称")])]),s._v(" "),t("h3",{attrs:{id:"_2-容器的构建等基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-容器的构建等基本操作"}},[s._v("#")]),s._v(" 2. 容器的构建等基本操作")]),s._v(" "),t("ol",[t("li",[s._v("Docker 容器的创建，查看，停止，重启等\n"),t("ul",[t("li",[s._v("构建容器："),t("code",[s._v("docker run -itd --name=mycentos centos:7")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("-i")]),s._v(" ：表示以交互模式运行容器（让容器的标准输入保持打开）")]),s._v(" "),t("li",[t("code",[s._v("-d")]),s._v("：表示后台运行容器，并返回容器 ID")]),s._v(" "),t("li",[t("code",[s._v("-t")]),s._v("：为容器重新分配一个伪输入终端")]),s._v(" "),t("li",[t("code",[s._v("--name")]),s._v("：为容器指定名称")])])])])]),s._v(" "),t("li",[s._v("查看本地所有的容器："),t("code",[s._v("docker ps -a")])]),s._v(" "),t("li",[s._v("查看本地正在运行的容器："),t("code",[s._v("docker ps")])]),s._v(" "),t("li",[s._v("停止容器："),t("code",[s._v("docker stop CONTAINER_ID / CONTAINER_NAME")])]),s._v(" "),t("li",[s._v("一次性停止所有容器："),t("code",[s._v("docker stop $(docker ps -a -q)")])]),s._v(" "),t("li",[s._v("启动容器："),t("code",[s._v("docker start CONTAINER_ID / CONTAINER_NAME")])]),s._v(" "),t("li",[s._v("重启容器："),t("code",[s._v("docker restart CONTAINER_ID / CONTAINER_NAME")])]),s._v(" "),t("li",[s._v("删除容器："),t("code",[s._v("docker rm CONTAINER_ID / CONTAINER_NAME")])]),s._v(" "),t("li",[s._v("强制删除容器："),t("code",[s._v("docker rmi -f CONTAINER_ID / CONTAINER_NAME")])]),s._v(" "),t("li",[s._v("查看容器详细信息："),t("code",[s._v("docker inspect CONTAINER_ID / CONTAINER_NAME")])]),s._v(" "),t("li",[s._v("进入容器："),t("code",[s._v("docker exec -it 0ad5d7b2c3a4 /bin/bash")])])]),s._v(" "),t("h3",{attrs:{id:"_3-容器的文件复制与挂载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-容器的文件复制与挂载"}},[s._v("#")]),s._v(" 3. 容器的文件复制与挂载")]),s._v(" "),t("p",[s._v("容器与宿主机之间文件复制与挂载。")]),s._v(" "),t("ol",[t("li",[s._v("从宿主机复制到容器："),t("code",[s._v("docker cp 宿主机本地路径 容器名字/ID：容器路径")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker cp /root/123.txt mycentos:/home/")])])])]),s._v(" "),t("li",[s._v("从容器复制到宿主机："),t("code",[s._v("docker cp 容器名字/ID：容器路径 宿主机本地路径")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker cp mycentos:/home/456.txt /root")])])])]),s._v(" "),t("li",[s._v("宿主机文件夹挂载到容器里："),t("code",[s._v("docker run -itd -v 宿主机路径:容器路径 镜像ID")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker run -itd -v /root/xdclass/:/home centos:7")])])])])]),s._v(" "),t("h3",{attrs:{id:"docker-目前镜像的制作有-2-种方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-目前镜像的制作有-2-种方法"}},[s._v("#")]),s._v(" docker 目前镜像的制作有 2 种方法")]),s._v(" "),t("ol",[t("li",[s._v("基于 Docker Commit 制作镜像")]),s._v(" "),t("li",[s._v("基于 dockerfile 制作镜像，Dockerfile 方式为主流的制作镜像方式")])]),s._v(" "),t("p",[s._v("基于 Dockerfile 多阶段构建镜像，将构建和运行分开，减少最终镜像中不必要的文件！")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一阶段：构建阶段")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node:16-alpine "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" builder")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" package*.json ./")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" npm install")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . .")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" npm run build")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第二阶段：运行阶段")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node:16-alpine")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("builder")])]),s._v(" /app/dist ./dist")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),s._v("]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# or STAGE 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" nginx:stable-alpine")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" --from=build /app/build /usr/share/nginx/html")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" nginx.conf /etc/nginx/conf.d/default.conf")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 80")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nginx"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-g"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"daemon off;"')]),s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("h3",{attrs:{id:"_4-commit-构建自定义镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-commit-构建自定义镜像"}},[s._v("#")]),s._v(" 4. Commit 构建自定义镜像")]),s._v(" "),t("ul",[t("li",[s._v("对容器的修改以及保存")])]),s._v(" "),t("ol",[t("li",[s._v("启动并进入容器："),t("code",[s._v("docker run -it centos:7 /bin/bash")])]),s._v(" "),t("li",[s._v("在/home 路径下创建 xdclass 文件夹："),t("code",[s._v("mkdir /home/xdclass")])]),s._v(" "),t("li",[s._v("安装 ifconfig 命令："),t("code",[s._v("yum -y install net-tools")])]),s._v(" "),t("li",[s._v("重启容器，查看容器的 xdclass 文件夹还在不在："),t("code",[s._v("docker restart 67862569d4f7")])]),s._v(" "),t("li",[s._v("删除容器，再重新启动一个容器进入查看有没有 xdclass 文件夹："),t("code",[s._v("docker rm 67862569d4f7 && docker run -it centos:7 /bin/bash")])]),s._v(" "),t("li",[s._v("构建镜像：\n"),t("ul",[t("li",[t("code",[s._v("docker commit 4eb9d14ebb18 mycentos:7")])]),s._v(" "),t("li",[t("code",[s._v('docker commit -a "XD" -m "mkdir /home/xdclass" 4eb9d14ebb18 mcentos:7')])]),s._v(" "),t("li",[t("code",[s._v("-a")]),s._v("：标注作者")]),s._v(" "),t("li",[t("code",[s._v("-m")]),s._v("：说明注释")]),s._v(" "),t("li",[s._v("查看详细信息："),t("code",[s._v("docker inspect 180176be1b4c")])])])]),s._v(" "),t("li",[s._v("启动容器："),t("code",[s._v("docker run -itd 180176be1b4c /bin/bash")])]),s._v(" "),t("li",[s._v("进入容器查看："),t("code",[s._v("docker exec -it 2a4d38eca64f /bin/bash")])])]),s._v(" "),t("ul",[t("li",[s._v("Dockerfile 构建镜像")])]),s._v(" "),t("ol",[t("li",[s._v("Dockerfile")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this is a dockerfile")]),s._v("\nFROM centos:7\nMAINTAINER XD "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v("@qq.com\nRUN "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"正在构建镜像！！！"')]),s._v("\nWORKDIR /home/xdclass\nCOPY "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(".txt /home/xdclass\nRUN yum "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" net-tools\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("构建："),t("code",[s._v("docker build -t mycentos:v2 .")])]),s._v(" "),t("li",[s._v("查看："),t("code",[s._v("docker images")])]),s._v(" "),t("li",[s._v("进入验证：验证成功")])]),s._v(" "),t("h3",{attrs:{id:"_5-介绍一些常用的-dockerfile-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-介绍一些常用的-dockerfile-指令"}},[s._v("#")]),s._v(" 5. 介绍一些常用的 Dockerfile 指令")]),s._v(" "),t("ul",[t("li",[s._v("FROM:基于哪个镜像")]),s._v(" "),t("li",[s._v("MAINTAINER:注明作者")]),s._v(" "),t("li",[s._v("COPY:复制文件进入镜像（只能用相对路径，不能用绝对路径）")]),s._v(" "),t("li",[s._v("ADD:复制文件进入镜像（假如文件是.tar.gz 文件会解压）")]),s._v(" "),t("li",[s._v("WORKDIR:指定工作目录，假如路径不存在会创建路径")]),s._v(" "),t("li",[s._v("ENV:设置环境变量")]),s._v(" "),t("li",[s._v("EXPOSE:暴露容器端口")]),s._v(" "),t("li",[s._v("RUN:在构建镜像的时候执行，作用于镜像层面")]),s._v(" "),t("li",[s._v("ENTRYPOINT:在容器启动的时候执行，作用于容器层，dockerfile 里有多条时只允许执行最后一条")]),s._v(" "),t("li",[s._v("CMD:\n"),t("ul",[t("li",[s._v("在容器启动的时候执行，作用于容器层，dockerfile 里有多条时只允许执行最后一条")]),s._v(" "),t("li",[s._v("容器启动后执行默认的命令或者参数，允许被修改")])])]),s._v(" "),t("li",[s._v("命令格式：\n"),t("ul",[t("li",[s._v("shell 命令格式："),t("code",[s._v("RUN yum install -y net-tools")])]),s._v(" "),t("li",[s._v("exec 命令格式："),t("code",[s._v('RUN [ "yum","install" ,"-y" ,"net-tools"]')])])])])]),s._v(" "),t("h3",{attrs:{id:"自己构建的容器无法启动怎么办"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自己构建的容器无法启动怎么办"}},[s._v("#")]),s._v(" 自己构建的容器无法启动怎么办")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("通过"),t("code",[s._v("docker exec -it <container_id> sh")]),s._v("无法进入容器进行调试，此时可以：")]),s._v(" "),t("ol",[t("li",[s._v("检查 Dockerfile 和构建输出中的错误信息")]),s._v(" "),t("li",[s._v("使用"),t("code",[s._v("docker run -it --entrypoint sh <image_id>")]),s._v("来启动容器\n"),t("ul",[t("li",[s._v("使用你构建的镜像启动一个容器")]),s._v(" "),t("li",[s._v("覆盖默认的 ENTRYPOINT,使用 sh 命令作为入口点")]),s._v(" "),t("li",[s._v("-it 参数可以让你进入容器内部的 shell")])])]),s._v(" "),t("li",[s._v("一种方式是使用 Dockerfile 的 RUN 指令，在构建阶段就检查容器内部（示例如下），这样不需要启动容器:这会直接在构建输出中返回命令执行结果，你可以根据输出来检查问题所在。")])])])]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# dockerfile")]),s._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sh"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ls /usr/local/bin/ | grep jenkins-agent"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sh"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"chmod +x /usr/local/bin/jenkins-agent"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sh"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/local/bin/jenkins-agent"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[t("code",[s._v("docker logs <container_id>")]),s._v(" 的输出(如果容器有启动的话)")])]),s._v(" "),t("h3",{attrs:{id:"报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#报错"}},[s._v("#")]),s._v(" 报错")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("vm.max_map_count [65530] is too low, increase to at least [262144]")]),s._v(" "),t("ul",[t("li",[s._v("解决方法："),t("code",[s._v("sudo sysctl -w vm.max_map_count=262144")])]),s._v(" "),t("li",[s._v("永久生效："),t("code",[s._v("sudo vim /etc/sysctl.conf")]),s._v("，添加"),t("code",[s._v("vm.max_map_count=262144")])]),s._v(" "),t("li",[s._v("官方临时："),t("code",[s._v("https://github.com/rimelek/fix-docker-containers/blob/ce8905e06f3e683e9166fa0cc971eea7251ed49b/docker-for-mac.md")]),s._v("，先"),t("code",[s._v("docker run -it --rm --privileged --pid=host justincormack/nsenter1")]),s._v("，然后进入容器"),t("code",[s._v("sysctl -w vm.max_map_count=262144")]),s._v("，然后"),t("code",[s._v("exit")]),s._v("退出容器，不能重启 docker 服务，否则会失效。")])])])]),s._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("Docker 是一种虚拟化技术，通过容器的方式，它的实现原理依赖 linux 的 "),t("code",[s._v("Namespace")]),s._v("、"),t("code",[s._v("Control Group")]),s._v("、"),t("code",[s._v("UnionFS")]),s._v(" 这三种机制。")]),s._v(" "),t("p",[t("code",[s._v("Namespace")]),s._v(" 做资源隔离，"),t("code",[s._v("Control Group")]),s._v(" 做容器的资源限制，"),t("code",[s._v("UnionFS")]),s._v(" 做文件系统的镜像存储、写时复制、镜像合并。")]),s._v(" "),t("p",[s._v("一般我们是通过 "),t("code",[s._v("dockerfile")]),s._v(" 描述镜像构建的过程，然后通过 "),t("code",[s._v("docker build")]),s._v(" 构建出镜像，上传到 registry。")]),s._v(" "),t("p",[s._v("镜像通过 "),t("code",[s._v("docker run")]),s._v(" 就可以跑起来，对外提供服务。")]),s._v(" "),t("p",[s._v("用 "),t("code",[s._v("dockerfile")]),s._v(" 做部署的最佳实践是分阶段构建，build 阶段单独生成一个镜像，然后把产物复制到另一个镜像，把这个镜像上传 registry。")]),s._v(" "),t("p",[s._v("这样镜像是最小的，传输速度、运行速度都比较快。")]),s._v(" "),t("p",[t("code",[s._v("Dockerfile")]),s._v(" 是一个文本文件，包含了用于构建 Docker 镜像的指令和参数。您可以使用 "),t("code",[s._v("docker build")]),s._v(" 命令来构建一个 Docker 镜像，指定 "),t("code",[s._v("Dockerfile")]),s._v(" 的路径即可。例如："),t("code",[s._v("docker build -f /path/to/Dockerfile .")]),s._v("。")]),s._v(" "),t("p",[s._v("一旦 Docker 镜像被构建出来，您可以使用 "),t("code",[s._v("docker run")]),s._v(" 命令来创建容器。容器是基于 Docker 镜像的运行实例，可以在容器内运行应用程序。例如："),t("code",[s._v("docker run myimage-name")]),s._v("。")]),s._v(" "),t("p",[s._v("简而言之，"),t("code",[s._v("Dockerfile")]),s._v(" 用于构建 Docker 镜像，而 Docker 镜像用于创建 Docker 容器。")]),s._v(" "),t("p",[s._v("一般我们都是在 jenkins 里跑，push 代码的时候，通过 web hooks 触发 jenkins 构建，最终产生运行时的镜像，上传到 registry。\n部署的时候把这个镜像 "),t("code",[s._v("docker pull")]),s._v(" 下来，然后 "),t("code",[s._v("docker run")]),s._v(" 就完成了部署。")]),s._v(" "),t("p",[s._v("前端、node 的代码都可以用 docker 部署，前端代码的静态服务还要作为 CDN 的源站服务器，不过我们也不一定要自己部署，很可能直接用阿里云的 OSS 对象存储服务了。")]),s._v(" "),t("h2",{attrs:{id:"docker-技术解决的问题是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-技术解决的问题是什么"}},[s._v("#")]),s._v(" Docker 技术解决的问题是什么")]),s._v(" "),t("p",[s._v("代码开发完之后，要经过构建，把产物部署到服务器上跑起来，这样才能被用户访问到。")]),s._v(" "),t("p",[s._v("不同的代码需要不同的环境，比如 JS 代码的构建需要 node 环境，Java 代码 需要 JVM 环境，一般我们会把它们隔离开来单独部署。")]),s._v(" "),t("p",[s._v("现在一台物理主机的性能是很高的，完全可以同时跑很多个服务，而我们又有环境隔离的需求，所以会用虚拟化技术把一台物理主机变为多台虚拟主机来用。")]),s._v(" "),t("p",[s._v("现在主流的"),t("strong",[s._v("虚拟化技术")]),s._v("就是 docker 了，它是"),t("strong",[s._v("基于容器的虚拟化技术")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("它可以在一台机器上跑多个容器，每个容器都有独立的操作系统环境，比如文件系统、网络端口等")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"远程仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[s._v("#")]),s._v(" 远程仓库")]),s._v(" "),t("ul",[t("li",[s._v("hi, I want to pull a docker image from remote repo and change sth of this image, and then push the changed image to the remote repo, how to make it?")])]),s._v(" "),t("ol",{attrs:{start:"0"}},[t("li",[s._v("要有个账号，docker 的或者私有的")]),s._v(" "),t("li",[t("code",[s._v("docker pull <remote_repo>/<image_name>:<tag>")])]),s._v(" "),t("li",[t("code",[s._v("docker run -it <remote_repo>/<image_name>:<tag> /bin/bash")])]),s._v(" "),t("li",[s._v("make changes to the image.")]),s._v(" "),t("li",[t("code",[s._v("docker commit <container_id> <remote_repo>/<image_name>:<new_tag>")])]),s._v(" "),t("li",[t("code",[s._v("docker push <remote_repo>/<image_name>:<new_tag>")])])]),s._v(" "),t("h2",{attrs:{id:"podman"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#podman"}},[s._v("#")]),s._v(" PodMan")]),s._v(" "),t("p",[s._v("TODO")]),s._v(" "),t("h2",{attrs:{id:"k8s"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#k8s"}},[s._v("#")]),s._v(" K8S")]),s._v(" "),t("p",[s._v("TODO")]),s._v(" "),t("h2",{attrs:{id:"优化-docker-镜像体积"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化-docker-镜像体积"}},[s._v("#")]),s._v(" 优化 Docker 镜像体积")]),s._v(" "),t("h3",{attrs:{id:"使用更小的基础镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用更小的基础镜像"}},[s._v("#")]),s._v(" 使用更小的基础镜像")]),s._v(" "),t("ol",[t("li",[s._v("alpine 镜像："),t("code",[s._v("FROM alpine:latest")]),s._v("，体积小，适合生产环境，Alpine 是一个轻量级的 Linux 发行版，体积约 5MB。")]),s._v(" "),t("li",[s._v("指定轻量化版本的官方镜像，通常以 -slim 或 -alpine 结尾。："),t("code",[s._v("FROM golang:1.17-alpine")]),s._v("，"),t("code",[s._v("FROM python:3.9-slim")])]),s._v(" "),t("li",[s._v("scratch 镜像："),t("code",[s._v("FROM scratch")]),s._v("，体积小，适合生产环境，使用 scratch 镜像时，只有应用程序和必要的依赖会被包含。")])]),s._v(" "),t("h3",{attrs:{id:"减少构建中的无用层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#减少构建中的无用层"}},[s._v("#")]),s._v(" 减少构建中的无用层")]),s._v(" "),t("p",[s._v("Docker 中每一行指令都会生成一个新的镜像层（Layer）。减少无用层可以优化镜像体积。")]),s._v(" "),t("ol",[t("li",[s._v("合并多条 RUN 指令：在 Dockerfile 中，将多个命令合并到一个 RUN 指令中，减少生成的镜像层数。")]),s._v(" "),t("li",[s._v("删除构建过程中的临时文件：在同一条指令中清理安装过程中产生的缓存或临时文件。")])]),s._v(" "),t("h3",{attrs:{id:"使用多阶段构建-multi-stage-build"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用多阶段构建-multi-stage-build"}},[s._v("#")]),s._v(" 使用多阶段构建（Multi-stage Build）")]),s._v(" "),t("p",[s._v("多阶段构建是 Docker 的一种镜像构建优化技术，允许在多个阶段中构建镜像，并仅保留最终阶段需要的内容。")]),s._v(" "),t("h3",{attrs:{id:"删除不必要的文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除不必要的文件"}},[s._v("#")]),s._v(" 删除不必要的文件")]),s._v(" "),t("p",[s._v("有些文件在镜像运行时并不需要，比如文档、编译器工具链等，可以删除这些文件以减小镜像体积。清理以下文件通常是一个好习惯：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("/var/lib/apt/lists/*（APT 缓存）\n/tmp/* 或其他临时目录\n构建过程中临时生成的文件\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"避免安装多余的依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#避免安装多余的依赖"}},[s._v("#")]),s._v(" 避免安装多余的依赖")]),s._v(" "),t("p",[s._v("只安装运行环境所需的最小依赖。如果只需要运行时依赖，可以避免安装编译工具等开发依赖。")]),s._v(" "),t("ul",[t("li",[s._v("对于 Node.js，可以使用 "),t("code",[s._v("npm install --production")]),s._v("。")]),s._v(" "),t("li",[s._v("对于 Python，可以使用 "),t("code",[s._v("pip install --no-dev")]),s._v("。")])]),s._v(" "),t("h3",{attrs:{id:"使用-dockerignore-文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerignore-文件"}},[s._v("#")]),s._v(" 使用 .dockerignore 文件")]),s._v(" "),t("p",[s._v("作用类似于 .gitignore，可以防止不必要的文件被复制到构建上下文中，从而减少镜像体积。")]),s._v(" "),t("h3",{attrs:{id:"压缩和精简运行时文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#压缩和精简运行时文件"}},[s._v("#")]),s._v(" 压缩和精简运行时文件")]),s._v(" "),t("ol",[t("li",[s._v("压缩二进制文件：对于拥有二进制文件的镜像，可以通过工具（如 upx）对其进行压缩。")]),s._v(" "),t("li",[s._v("删除调试信息：在构建过程中编译时，可以通过优化选项删除调试信息。")])]),s._v(" "),t("h3",{attrs:{id:"使用分层镜像优化工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用分层镜像优化工具"}},[s._v("#")]),s._v(" 使用分层镜像优化工具")]),s._v(" "),t("ol",[t("li",[s._v("Docker 自带的 "),t("code",[s._v("docker builder prune")]),s._v("：构建过程中会生成缓存，定期清理缓存可以减少镜像占用的空间。")]),s._v(" "),t("li",[s._v("dive 工具：dive 是一个开源工具，可以分析 Docker 镜像的每一层，帮助优化镜像体积。"),t("code",[s._v("dive <image-name>")])])]),s._v(" "),t("h3",{attrs:{id:"减少镜像中的历史记录-squash-layers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#减少镜像中的历史记录-squash-layers"}},[s._v("#")]),s._v(" 减少镜像中的历史记录（Squash Layers）")]),s._v(" "),t("p",[s._v('每次构建镜像时，镜像的历史记录会保存到镜像层中。如果需要进一步优化，可以通过 "squash" 将多个层压缩为一个层。压缩镜像层可能会影响镜像的构建速度，因为缓存层会减少。')]),s._v(" "),t("ol",[t("li",[s._v("squash 命令可以将多个镜像层合并成一个，从而减小镜像体积。启用镜像压缩："),t("code",[s._v("docker build --squash -t my-image .")])])]),s._v(" "),t("h3",{attrs:{id:"使用缓存优化构建过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用缓存优化构建过程"}},[s._v("#")]),s._v(" 使用缓存优化构建过程")]),s._v(" "),t("p",[s._v("通过合理利用缓存，可以避免重新安装依赖或重新下载资源，从而加速构建过程。")]),s._v(" "),t("h3",{attrs:{id:"使用容器化的专用工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用容器化的专用工具"}},[s._v("#")]),s._v(" 使用容器化的专用工具")]),s._v(" "),t("ol",[t("li",[s._v("distroless 镜像： 是 Google 提供的轻量化镜像，完全移除了 Shell、包管理器等，只保留运行应用所需的文件。")]),s._v(" "),t("li",[s._v("Builder 工具链优化：使用 BuildKit 构建镜像，减少镜像层的重复。启用 BuildKit："),t("code",[s._v("DOCKER_BUILDKIT=1 docker build .")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);