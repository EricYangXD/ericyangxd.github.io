(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{808:function(s,t,a){"use strict";a.r(t);var e=a(7),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组成"}},[s._v("#")]),s._v(" 组成")]),s._v(" "),a("p",[s._v("主要由两部分组成：")]),s._v(" "),a("ol",[a("li",[s._v("一个开发服务器，它基于 原生 ES Module 提供了 丰富的内建功能，如速度快到惊人的 模块热更新（HMR）。")]),s._v(" "),a("li",[s._v("一套构建指令，它使用 Rollup 打包代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。")]),s._v(" "),a("li",[s._v("即开发的时候用 esbuild，生产打包用 rollup")])]),s._v(" "),a("h2",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[s._v("#")]),s._v(" 原理")]),s._v(" "),a("blockquote",[a("p",[s._v("以下引用自"),a("a",{attrs:{href:"https://cn.vitejs.dev/guide/why.html#slow-server-start",target:"_blank",rel:"nofollow noopener noreferrer"}},[s._v("Vite 官方中文文档"),a("OutboundLink")],1)])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Vite 通过在一开始将应用中的模块区分为 「依赖」 和 「源码」 两类，改进了开发服务器启动时间。")])]),s._v(" "),a("li",[a("p",[s._v("依赖 大多为在开发时不会变动的纯 JavaScript。Vite 将会使用 esbuild 预构建依赖。")])]),s._v(" "),a("li",[a("p",[s._v("源码 通常包含一些并非直接是 JavaScript 的文件，需要转换（例如 JSX，CSS 或者 Vue/Svelte 组件），时常会被编辑。同时，并不是所有的源码都需要同时被加载（例如基于路由拆分的代码模块）。")])]),s._v(" "),a("li",[a("p",[s._v("Vite 以 原生 ESM 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。")])]),s._v(" "),a("li",[a("p",[a("img",{attrs:{src:"https://cn.vitejs.dev/assets/esm.3070012d.png",alt:"Vite原理图",title:"Vite原理图"}})])])]),s._v(" "),a("ol",{attrs:{start:"0"}},[a("li",[s._v("esbuild 构建之后，会对「依赖包」的请求设置强缓存"),a("code",[s._v("cache-control:max-age=31536000,immutable;")])]),s._v(" "),a("li",[s._v("在启动的时候，vite 并不会打包源码，而是在浏览器请求路由时才会进行打包，而且也仅仅打包当前路由的源码。这相当于让浏览器掌握了打包的控制权，从而将"),a("code",[s._v("Bundle based dev server")]),s._v("(如 webpack)一次性打包全部源码的操作改为了多次，启动速度无疑会快非常多。")]),s._v(" "),a("li",[s._v("在访问时转换的速度也不会慢下来，因为每次转换的源码只有在当前路由下的，并且「源码模块」还会设置协商缓存，当模块没有改变时，浏览器的请求会返回 304 Not Modified。")])]),s._v(" "),a("h2",{attrs:{id:"优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[s._v("#")]),s._v(" 优势")]),s._v(" "),a("h3",{attrs:{id:"vite-天然支持引入-ts、-jsx、-css-等文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vite-天然支持引入-ts、-jsx、-css-等文件"}},[s._v("#")]),s._v(" Vite 天然支持引入.ts、.jsx、.css 等文件")]),s._v(" "),a("ol",[a("li",[s._v("Vite 使用 esbuild 将 ts 转译为 js，约是 tsc 速度的 20-30 倍，同时 HMR 更新反映到浏览器的时间小于 50ms")]),s._v(" "),a("li",[s._v(".jsx 和.tsx 文件同样开箱即用。JSX 的转译同样是通过 esbuild，默认为 react16 风格")]),s._v(" "),a("li",[s._v("导入.css 文件将会把内容插入到"),a("code",[s._v("<style>")]),s._v("标签中，同时也带有 HMR 支持。同时支持.scss/.sass/.less/.stylus 等格式文件。")])]),s._v(" "),a("h3",{attrs:{id:"方便"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方便"}},[s._v("#")]),s._v(" 方便")]),s._v(" "),a("ol",[a("li",[s._v("开箱即用，对比 webpack，少了很多 plugin 和 loader 配置。")]),s._v(" "),a("li",[s._v("对于库开发者，也可以通过简单的配置即可打包输出多种格式的包。")]),s._v(" "),a("li",[s._v("开发和生产共享了 rollup 的插件接口，大部分 rollup 插件可以在 vite 上使用。")]),s._v(" "),a("li",[s._v("类型化配置，配置文件可以使用 ts，具有配置类型提示。")])]),s._v(" "),a("h3",{attrs:{id:"webassembly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webassembly"}},[s._v("#")]),s._v(" WebAssembly")]),s._v(" "),a("p",[s._v("预编译的.wasm 文件可以直接被导入——默认导出一个函数，返回值为所导出的 wasm 实例对象的 Promise。")]),s._v(" "),a("h3",{attrs:{id:"构建优化-异步-chunk-加载优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建优化-异步-chunk-加载优化"}},[s._v("#")]),s._v(" 构建优化——异步 chunk 加载优化")]),s._v(" "),a("p",[s._v("无优化时，当异步 chunkA 被导入时，浏览器将必须先请求和解析 A，然后才能弄清楚它也需要公用 chunkC，这会导致额外的网络请求开销；")]),s._v(" "),a("p",[s._v("优化后，Vite 使用一个预加载步骤自动重写代码，来分割动态导入调用，以实现当 A 被请求时，C 也将被同时请求；")]),s._v(" "),a("p",[s._v("Vite 的优化会跟踪所有的直接导入，无论导入的深度如何，都能够完全消除不必要的往返。")]),s._v(" "),a("h3",{attrs:{id:"支持-ssr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持-ssr"}},[s._v("#")]),s._v(" 支持 SSR")]),s._v(" "),a("h2",{attrs:{id:"defineconfig-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defineconfig-配置"}},[s._v("#")]),s._v(" defineConfig 配置")]),s._v(" "),a("ul",[a("li",[s._v("optimizeDeps.exclude: 在预构建中强制排除的依赖项。(mark as external)")])]),s._v(" "),a("h2",{attrs:{id:"迁移到-vite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迁移到-vite"}},[s._v("#")]),s._v(" 迁移到 Vite")]),s._v(" "),a("h3",{attrs:{id:"新项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新项目"}},[s._v("#")]),s._v(" 新项目")]),s._v(" "),a("p",[s._v("使用 Vite 提供的模板工具：@vitejs/create-app")]),s._v(" "),a("h3",{attrs:{id:"老项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#老项目"}},[s._v("#")]),s._v(" 老项目")]),s._v(" "),a("ol",[a("li",[s._v("webpack 项目：wp2vite，保留原来的 webpack 配置，把 vite 的配置注入到项目中以支持 vite")])]),s._v(" "),a("h2",{attrs:{id:"rollup-js-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rollup-js-简介"}},[s._v("#")]),s._v(" Rollup.js 简介")]),s._v(" "),a("ol",[a("li",[s._v("打包工具的作用是，将多个 JavaScript 脚本合并成一个脚本，供浏览器使用。浏览器需要脚本打包，主要原因有三个：")])]),s._v(" "),a("ul",[a("li",[s._v("早期的浏览器不支持模块，大型网页项目只能先合并成单一脚本再执行。")]),s._v(" "),a("li",[s._v("Node.js 的模块机制与浏览器不兼容，必须通过打包工具进行兼容处理。")]),s._v(" "),a("li",[s._v("浏览器加载一个大脚本，要比加载多个小脚本，性能更好。")])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("rollup.js 可以打包 ES 模块，简单易用。也支持 CommonJS，但是配置就会比较复杂。如果项目使用 CommonJS 模块，不推荐使用 rollup.js，优势不大。直接上 webpack。")]),s._v(" "),a("li",[s._v("全局安装"),a("code",[s._v("npm install --global rollup")]),s._v("，也可以不安装直接使用，只需把命令中的"),a("code",[s._v("rollup")]),s._v("，替换成"),a("code",[s._v("npx rollup")]),s._v("。")]),s._v(" "),a("li",[s._v("打包："),a("code",[s._v("rollup filename.js")]),s._v("，打包时只需给出入口脚本 main.js，rollup 会自动把依赖项打包进去。打包结果默认输出到屏幕。")]),s._v(" "),a("li",[s._v("打包时自动删除没有用到的代码，这种特性叫做摇树（tree-shaking）。rollup 输出的代码非常整洁，而且体积小于其他打包工具。")]),s._v(" "),a("li",[s._v("使用参数"),a("code",[s._v("--file [FILENAME]")]),s._v("，将打包结果保存到指定文件。"),a("code",[s._v("rollup main.js --file bundle.js")])]),s._v(" "),a("li",[s._v("使用注意点:\n"),a("ol",[a("li",[s._v("如果有多个入口脚本，就依次填写它们的文件名，并使用参数"),a("code",[s._v("--dir")]),s._v("指定输出目录。"),a("code",[s._v("rollup m1.js m2.js --dir dist")]),s._v("会在目录 dist，打包生成多个文件：m1.js、m2.js、以及它们共同的依赖项（如果有的话）。")]),s._v(" "),a("li",[s._v("参数"),a("code",[s._v("--format iife")]),s._v("，会把打包结果放在一个自动执行函数里面。"),a("code",[s._v("rollup main.js --format iife")])]),s._v(" "),a("li",[s._v("如果希望打包后代码最小化，使用参数"),a("code",[s._v("--compact")]),s._v("。"),a("code",[s._v("rollup main.js --compact")])]),s._v(" "),a("li",[s._v("另一种方法是使用专门工具。"),a("code",[s._v("rollup main.js | uglifyjs --output bundle.js")]),s._v("该命令分成两步，第一步是 rollup 打包，第二步是 uglifyjs 进行代码最小化，最后写入 bundle.js。")]),s._v(" "),a("li",[s._v("rollup 支持使用配置文件（rollup.config.js），把参数都写在里面，例：")])])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// rollup.config.js")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("input")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"main.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("output")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("file")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bundle.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("format")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"es"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ol",{attrs:{start:"8"}},[a("li",[s._v("参数"),a("code",[s._v("-c")]),s._v("启用配置文件。")]),s._v(" "),a("li",[s._v("rollup 还支持 ES 模块转成 CommonJS 模块，使用参数"),a("code",[s._v("--format cjs")]),s._v("就可以了。"),a("code",[s._v("rollup add.js --format cjs")])])]),s._v(" "),a("h2",{attrs:{id:"配置解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置解释"}},[s._v("#")]),s._v(" 配置解释")]),s._v(" "),a("h3",{attrs:{id:"workspace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workspace"}},[s._v("#")]),s._v(" workspace:*")]),s._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"devDependencies"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"vite"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"workspace:*"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这里的"),a("code",[s._v("vite")]),s._v("是一个开发依赖项，它是一个现代化的前端构建工具，用于提高开发效率。"),a("code",[s._v("workspace:*")]),s._v("是一个特殊的语法，它指示 npm 或 yarn 从工作区（workspace）中获取 vite 的版本。")]),s._v(" "),a("p",[s._v("工作区（workspace）是 npm 和 yarn 支持的一种功能，允许你在单个仓库中管理多个包（package），这些包可以相互依赖。当你使用工作区时，你可以指定依赖项从工作区中获取，而不是从 npm 注册表中获取。")]),s._v(" "),a("p",[a("code",[s._v("workspace:*")]),s._v("中的"),a("code",[s._v("*")]),s._v("表示使用工作区中匹配的最新版本。这意味着如果 vite 是你的工作区中的一个包，那么这个配置会确保使用工作区中 vite 包的最新版本。")]),s._v(" "),a("p",[s._v("这种配置通常用于 monorepo（单一代码仓库）设置中，其中多个相关的项目被组织在同一个仓库中，并且它们之间可能存在依赖关系。通过使用"),a("code",[s._v("workspace:*")]),s._v("，你可以确保依赖项的版本与工作区中的实际版本保持一致，这有助于避免版本冲突和确保依赖项的一致性。")])])}),[],!1,null,null,null);t.default=r.exports}}]);