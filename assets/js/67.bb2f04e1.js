(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{746:function(a,t,s){"use strict";s.r(t);var e=s(8),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"tips-skills"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tips-skills"}},[a._v("#")]),a._v(" Tips & Skills")]),a._v(" "),s("h3",{attrs:{id:"jdk-设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk-设置"}},[a._v("#")]),a._v(" JDK 设置")]),a._v(" "),s("ol",[s("li",[a._v("包含关系 JDK > JRE > JVM")])]),a._v(" "),s("h4",{attrs:{id:"mac"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mac"}},[a._v("#")]),a._v(" Mac")]),a._v(" "),s("ol",[s("li",[a._v("全局安装 JDK 配置"),s("code",[a._v(".zshrc")]),a._v(" or"),s("code",[a._v(".bash_profile")])])]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#maven")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MAVEN_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/Users/eric/backend/maven\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${MAVEN_HOME}")]),a._v("/bin:/"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),a._v(":.\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#java")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("JAVA_8_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/Library/Java/JavaVirtualMachines/jdk1.8.0_341.jdk/Contents/Home\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("JAVA_11_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/Library/Java/JavaVirtualMachines/jdk-11.0.16.1.jdk/Contents/Home\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("JAVA_17_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/Library/Java/JavaVirtualMachines/jdk-17.0.4.1.jdk/Contents/Home\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("JAVA_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$JAVA_8_HOME")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${JAVA_HOME}")]),a._v("/bin:"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),a._v(":.\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CLASSPATH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$JAVA_HOME")]),a._v("/lib/tools.jar:"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$JAVA_HOME")]),a._v("/lib/dt.jar\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('#alias jdk8="export JAVA_HOME=$JAVA_8_HOME"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('#alias jdk11="export JAVA_HOME=$JAVA_11_HOME"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('#alias jdk17="export JAVA_HOME=$JAVA_17_HOME"')]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br")])]),s("h4",{attrs:{id:"windows"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[a._v("#")]),a._v(" Windows")]),a._v(" "),s("p",[a._v("配置环境变量：")]),a._v(" "),s("ol",[s("li",[a._v("配置 path："),s("code",[a._v("新建->变量名JAVA_HOME")]),a._v("，变量值："),s("code",[a._v("C:\\Program Files\\xxx\\Java\\jdk1.4.1")]),a._v("（这里是你的 JDK 的安装路径）")]),a._v(" "),s("li",[s("code",[a._v("编辑->变量名Path")]),a._v("，在原变量值的最后面加上："),s("code",[a._v(";%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin")])]),a._v(" "),s("li",[s("code",[a._v("新建->变量名CLASSPATH")]),a._v(",变量值："),s("code",[a._v(".;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar")])])]),a._v(" "),s("ul",[s("li",[a._v("配置 JAVA_HOME 的作用： 指定 java 安装目录")]),a._v(" "),s("li",[a._v("配置 PATH 的作用：指定 java 命令搜索路径。本来只有在 jdk 的 bin 目录才可以运行 javac java 命令，但如果希望在任意的目录下面都可以访问到 javac java 命令，就必须配置 path")]),a._v(" "),s("li",[a._v("配置 CLASSPATH 的作用： 指定 Java 执行环境，在哪些目录下可以找到您所要执行的 Java 程序所需要的类或者包。通俗的说它的作用与 import、package 关键字有关，我们写的 java 源码中，当然会包含别人提供的工具类，比如当你写下 improt java.util.*时，编译器面对 import 关键字时，就需要知道你要引入 java.util 这个 package 中的类到底在哪里。与上面的一样， 如果不告诉，他就默认在当前目录下，而如何告诉它呢？就是设置 CLASSPATH。（从 java5 开始也可以不配置，但建议配上）")])]),a._v(" "),s("p",[a._v("在控制台分别输入 java，javac，java -version 命令，出现如下所示的 JDK 的编译器信息，包括修改命令的语法和参数选项等信息。")]),a._v(" "),s("h3",{attrs:{id:"tomcat-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-配置"}},[a._v("#")]),a._v(" Tomcat 配置")]),a._v(" "),s("p",[a._v("Tomcat 环境变量配置：")]),a._v(" "),s("ul",[s("li",[a._v("如果你的 Tomcat 安装在 C 盘里，如："),s("code",[a._v("C:\\Program Files\\Apache Software Foundation\\Tomcat 8.0")]),a._v("（在这里切记，安装 Tomcat 时，在其字母周围一定不要存在空格，否则最后可能导致配置不成功）")])]),a._v(" "),s("ol",[s("li",[a._v("点击新建。变量名为"),s("code",[a._v("TOMCAT_HOME")]),a._v("，变量值为 Tomcat 安装目录")]),a._v(" "),s("li",[a._v("在系统变量里点新建：")])]),a._v(" "),s("ul",[s("li",[a._v("变量名："),s("code",[a._v("CATALINA_BASE")])]),a._v(" "),s("li",[a._v("变量值："),s("code",[a._v("C:\\Program Files\\Apache Software Foundation\\Tomcat 8.0;")])])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("再次新建：")])]),a._v(" "),s("ul",[s("li",[a._v("变量名："),s("code",[a._v("CATALINA_HOME")])]),a._v(" "),s("li",[a._v("变量值："),s("code",[a._v("C:\\Program Files\\Apache Software Foundation\\Tomcat 8.0;")])]),a._v(" "),s("li",[a._v("点击确定")])]),a._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[a._v("在 classpath 中加入"),s("code",[a._v("%CATALINA_HOME%\\common\\lib\\servlet-api.jar;")]),a._v("（注意加的时候在原变量值后加英文状态下的"),s("code",[a._v(";")]),a._v("）")]),a._v(" "),s("li",[a._v("在 path 中加入"),s("code",[a._v("%CATALINA_HOME%\\bin;")]),a._v("（注意加的时候在原变量值后加英文状态下的"),s("code",[a._v(";")]),a._v("）")])]),a._v(" "),s("h3",{attrs:{id:"idea-vm-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#idea-vm-options"}},[a._v("#")]),a._v(" IDEA VM Options")]),a._v(" "),s("p",[a._v("根据机器情况修改 idea.vmoptions 配置，可以提高 idea 的运行流畅度。")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Xms1024m")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Xmx2048m")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+UseConcMarkSweepGC")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Djava.net.preferIPv4Stack")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Dfile.encoding")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("UTF-8\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h3",{attrs:{id:"修改-idea-中-tomcat-运行端口号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改-idea-中-tomcat-运行端口号"}},[a._v("#")]),a._v(" 修改 IDEA 中 Tomcat 运行端口号")]),a._v(" "),s("p",[a._v("在"),s("code",[a._v("application.properties")]),a._v("配置文件中设置"),s("code",[a._v("server.port=8080")]),a._v("即可。")]),a._v(" "),s("h2",{attrs:{id:"mysql-一行记录是怎么存储的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-一行记录是怎么存储的"}},[a._v("#")]),a._v(" MySQL 一行记录是怎么存储的？")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("MySQL 的数据都是保存在磁盘的，那具体是保存在哪个文件呢：MySQL 存储的行为是由存储引擎实现的，MySQL 支持多种存储引擎，不同的存储引擎保存的文件自然也不同。InnoDB 是我们常用的存储引擎，也是 MySQL 默认的存储引擎。所以，本文主要以 InnoDB 存储引擎展开讨论。")])]),a._v(" "),s("li"),a._v(" "),s("li",[s("p",[a._v("MySQL 的 NULL 值会占用空间吗？")])]),a._v(" "),s("li",[s("p",[a._v("MySQL 怎么知道 varchar(n) 实际占用数据的大小？")])]),a._v(" "),s("li",[s("p",[a._v("varchar(n) 中 n 最大取值为多少？")])]),a._v(" "),s("li",[s("p",[a._v("行溢出后，MySQL 是怎么处理的？")])])]),a._v(" "),s("h2",{attrs:{id:"项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目"}},[a._v("#")]),a._v(" 项目")]),a._v(" "),s("h3",{attrs:{id:"秒杀系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#秒杀系统"}},[a._v("#")]),a._v(" 秒杀系统")]),a._v(" "),s("p",[a._v("使用 SpringMVC+Spring+MyBatis 框架，原因：")]),a._v(" "),s("ol",[s("li",[a._v("框架易于使用和轻量级")]),a._v(" "),s("li",[a._v("低代码侵入性")]),a._v(" "),s("li",[a._v("成熟的社区和用户群")])]),a._v(" "),s("h4",{attrs:{id:"系统分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统分析"}},[a._v("#")]),a._v(" 系统分析")]),a._v(" "),s("ol",[s("li",[a._v("秒杀业务的核心：对产品库存的处理。")]),a._v(" "),s("li",[a._v("难点在于“竞争”")]),a._v(" "),s("li",[a._v("优化方向：减少事务行级锁的竞争")])]),a._v(" "),s("blockquote",[s("p",[a._v("创建项目")])]),a._v(" "),s("p",[a._v("命令："),s("code",[a._v("mvn archetype:create -DgroupId=org.seckill -DartifactId=seckill -DarchetypeArtifactId=maven-archetype-webapp")])]),a._v(" "),s("blockquote",[s("p",[a._v("MyBatis")])]),a._v(" "),s("h4",{attrs:{id:"mysql-表设计-dao-层设计与开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-表设计-dao-层设计与开发"}},[a._v("#")]),a._v(" MySQL 表设计-DAO 层设计与开发")]),a._v(" "),s("h4",{attrs:{id:"mybatis-合理使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-合理使用"}},[a._v("#")]),a._v(" MyBatis 合理使用")]),a._v(" "),s("h4",{attrs:{id:"mybatis-与-spring-整合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-与-spring-整合"}},[a._v("#")]),a._v(" MyBatis 与 Spring 整合")]),a._v(" "),s("p",[a._v("JDBC、Hibernate、MyBatis 都是用来简化数据库操作的框架，把 Entity（Bean）对象映射成数据库中的对象也能把数据库中的数据映射成 Entity 对象，从而让开发者可以通过代码实现对数据库的操作，并得到相应的数据。MyBatis 是基于 Java 的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs（Plain Old Java Objects）映射成数据库中的记录。Hibernate、MyBatis 都是 orm 对象关系映射框架。")]),a._v(" "),s("ol",[s("li",[a._v("MyBatis 特点：参数+SQL=Entity/List")]),a._v(" "),s("li",[a._v("SQL 写在哪？可以写在 xml 文件中或者写在注解中@SQL")]),a._v(" "),s("li",[a._v("如何实现 DAO 接口？Mapper 自动实现 DAO 接口 impl 或者 API 编程方式实现 DAO 接口")]),a._v(" "),s("li",[a._v("Mapper 自动实现 DAO 接口 impl：创建对应的 DAO.xml 文件，然后设置正确的 DOCTYPE，然后在"),s("code",[a._v("<mapper></mapper>")]),a._v("标签中编写对应的 sql 语句，命名正确的 namespace。即 xml 提供 SQL，Mapper 自动实现 DAP 接口。")]),a._v(" "),s("li",[s("code",[a._v("jdbc.properties")]),a._v("中配置 driver、url 等数据库信息")])]),a._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[a._v("driver=com.mysql.jdbc.Driver\nurl=jdbc:mysql://127.0.0.1:3307\nusername=root\npassword=root\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("ol",{attrs:{start:"6"}},[s("li",[a._v("在 xml 中，通过 bean 标签配置 c3p0 连接池 class，在 property 标签中配置"),s("code",[a._v("jdbc.properties")]),a._v("中的属性，比如设置 c3p0 连接池的私有属性："),s("code",[a._v('<property name="maxPoolSize" value="30"/><property name="minPoolSize" value="10"/>')]),a._v("这种。还要配置 SqlSessionFactory 对象，在其下注入数据库连接池，配置 MyBatis 全局配置文件，对扫描的 Entity 包、sql 配置文件等使用别名配置正确。然后还要配置扫描 DAO 接口包，动态实现 DAO 接口注入到 Spring 容器中--MapperScannerConfigurer，sqlSessionFactoryBeanName。")]),a._v(" "),s("li",[s("code",[a._v("classpath")]),a._v("相当于 java 和 resources 两个文件夹的路径别名，比如"),s("code",[a._v("classpath:jdbc.properties")]),a._v("能直接找到 jdbc.properties 这个配置文件。")]),a._v(" "),s("li",[a._v("在 MyBatis 中，DAO 接口方法的参数需要使用"),s("code",[a._v('@Param("myId") long id')]),a._v("的形式来在单元测试中识别多个参数，单个参数可以不用。")])]),a._v(" "),s("blockquote",[s("p",[a._v("Spring")])]),a._v(" "),s("h4",{attrs:{id:"spring-ioc-整合-service"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc-整合-service"}},[a._v("#")]),a._v(" Spring IOC 整合 Service")]),a._v(" "),s("ol",[s("li",[a._v("dto 文件夹下存放 service 返回的数据类，关注的是 web 和 web service 之间的数据传递。Entity 下面放的是业务数据的封装。\n"),s("ul",[s("li",[a._v("DTO 用于数据传输，主要用于在不同层之间传递数据，尤其是在 Web 层和服务层之间。关注的是接口层的需求，更多用于表示向客户端提供的数据结构。简化数据传输，解耦和安全，序列化友好。")]),a._v(" "),s("li",[a._v("Entity 则是业务数据的核心表示，通常表示业务数据和数据库表之间的映射。关注的是数据持久化和业务逻辑。与数据库表映射，业务逻辑，持久化。")])])]),a._v(" "),s("li",[a._v("站在使用者角度设计 Service，而不是站在实现者角度设计 Service，方法定义粒度明确，参数要简洁，返回类型要友好")]),a._v(" "),s("li",[a._v("service 文件夹下创建 impl 文件夹实现 service")]),a._v(" "),s("li",[a._v("使用 Spring 托管 service，并提供一致的访问接口，可以通过注解或者 applicationContext 去拿实例")]),a._v(" "),s("li",[a._v("Spring IOC 注入方式和场景：xml、注解、Java 配置类。\n"),s("ul",[s("li",[a._v("xml：1:Bean 实现类来自第三方类库，如：DataSource 等；2：需要命名空间配置如：context，aop，mvc 等")]),a._v(" "),s("li",[a._v("注解：项目中自身开发使用的类，可直接在代码中使用注解如：@Service，@Controller，@Dao，@Component 等")]),a._v(" "),s("li",[a._v("Java 配置类：需要通过代码控制对象创建逻辑的场景如：自定义修改依赖类库。")])])]),a._v(" "),s("li",[a._v("xml 配置 -> package-scan -> Annotation 注解 "),s("code",[a._v('<context:component-scan base-package="com.example.xxx" />')])])]),a._v(" "),s("h4",{attrs:{id:"声明式事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#声明式事务"}},[a._v("#")]),a._v(" 声明式事务")]),a._v(" "),s("ol",[s("li",[a._v("使用方式：\n"),s("ul",[s("li",[a._v("ProxyFactoryBean+xml")]),a._v(" "),s("li",[a._v("tx:advice+aop 命名空间")]),a._v(" "),s("li",[a._v("注解@Transactional")])])]),a._v(" "),s("li",[a._v("事务方法嵌套：新的事务会加入到已有的事务中，如果之前没有事务才会新建一个事务")]),a._v(" "),s("li",[a._v("什么时候回滚事务：抛出运行期异常 RuntimeException 时。小心不当的 try catch，会导致部分事务即使失败了也不会自动回滚。")])]),a._v(" "),s("blockquote",[s("p",[a._v("SpringMVC")])]),a._v(" "),s("p",[a._v("在 xml 中配置 SpringMVC")]),a._v(" "),s("ol",[s("li",[a._v("开启 SpringMVC 注解模式："),s("code",[a._v("<mvc:annotation-driven/>")]),a._v(" "),s("ul",[s("li",[a._v("简化配置：1. 自动注册 DefaultAnnotationHandlerMapping，AnnotationMethodHandlerAdapter；2. 提供一系列数据绑定、数字和日期的 format-@NumberFormat、@DateTimeFormat，xml、json 默认读写支持")])])]),a._v(" "),s("li",[a._v("静态资源默认 servlet 配置："),s("code",[a._v("<mvc:default-servlet-handler/>")]),a._v(" "),s("ul",[s("li",[a._v('servlet-mapping 映射路径："/"')]),a._v(" "),s("li",[a._v("加入对静态资源的处理：js，jpg，png，css，gif...")]),a._v(" "),s("li",[a._v('允许使用"/"做整体映射')])])]),a._v(" "),s("li",[a._v("配置 jsp 显示 ViewResolver："),s("code",[a._v('<bean class="...InternalResourceViewResolver"><property xxx></property></bean>')]),a._v(" "),s("ul",[s("li",[a._v("配置 jsp，放置位置，后缀名，prefix，suffix，viewClass 等")]),a._v(" "),s("li",[a._v("通过 ViewResolver 实现页面跳转")])])]),a._v(" "),s("li",[a._v("扫描 web 相关的 bean："),s("code",[a._v('<context:component-scan base-package="com.xx.xx" />')])])]),a._v(" "),s("h4",{attrs:{id:"restful-接口设计和使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#restful-接口设计和使用"}},[a._v("#")]),a._v(" Restful 接口设计和使用")]),a._v(" "),s("h4",{attrs:{id:"框架运作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#框架运作流程"}},[a._v("#")]),a._v(" 框架运作流程")]),a._v(" "),s("h4",{attrs:{id:"controller-开发技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#controller-开发技巧"}},[a._v("#")]),a._v(" Controller 开发技巧")]),a._v(" "),s("blockquote",[s("p",[a._v("高并发")])]),a._v(" "),s("h4",{attrs:{id:"高并发点和高并发瓶颈分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高并发点和高并发瓶颈分析"}},[a._v("#")]),a._v(" 高并发点和高并发瓶颈分析")]),a._v(" "),s("ol",[s("li",[a._v("数据库操作加解锁，事务竞争，排队，GC")]),a._v(" "),s("li",[a._v("网络延迟，异地机房，CDN")])]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("问题")]),a._v(" "),s("th",[a._v("触发条件")]),a._v(" "),s("th",[a._v("后果")]),a._v(" "),s("th",[a._v("解决方案")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("缓存击穿")]),a._v(" "),s("td",[a._v("某个热点数据的缓存突然失效，大量请求同时查询该数据。")]),a._v(" "),s("td",[a._v("大量请求打到数据库，数据库压力骤增。")]),a._v(" "),s("td",[a._v("缓存预热、加锁、热点数据永不过期。")])]),a._v(" "),s("tr",[s("td",[a._v("缓存雪崩")]),a._v(" "),s("td",[a._v("大量缓存数据在同一时间失效。")]),a._v(" "),s("td",[a._v("短时间内大量请求直接打到数据库，系统崩溃。")]),a._v(" "),s("td",[a._v("随机化过期时间、缓存预热、多级缓存、降级策略。")])]),a._v(" "),s("tr",[s("td",[a._v("缓存穿透")]),a._v(" "),s("td",[a._v("查询一个数据库和缓存中都不存在的值，大量请求绕过缓存直接访问数据库。")]),a._v(" "),s("td",[a._v("数据库压力过大，可能被拖垮。")]),a._v(" "),s("td",[a._v("缓存空值、参数校验、布隆过滤器、限流。")])])])]),a._v(" "),s("h4",{attrs:{id:"高并发优化思路及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高并发优化思路及实现"}},[a._v("#")]),a._v(" 高并发优化思路及实现")]),a._v(" "),s("ol",[s("li",[a._v("减少操作数据库时上锁的时间，减少数据库的压力")]),a._v(" "),s("li",[a._v("使用缓存，减少数据库的访问")]),a._v(" "),s("li",[a._v("使用异步处理，减少用户等待时间")]),a._v(" "),s("li",[a._v("使用 CDN，减少网络延迟")]),a._v(" "),s("li",[a._v("使用分布式，减少单机压力")])]),a._v(" "),s("h4",{attrs:{id:"如何判断-update-更新数据库成功"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何判断-update-更新数据库成功"}},[a._v("#")]),a._v(" 如何判断 Update 更新数据库成功")]),a._v(" "),s("ol",[s("li",[a._v("update 没报错+客户端确认 update 影响记录数")])]),a._v(" "),s("p",[a._v("优化思路：把客户端逻辑放到 MySQL 服务端，避免网络延迟和 GC 的影响")]),a._v(" "),s("p",[a._v("方案：")]),a._v(" "),s("ol",[s("li",[a._v("定制 SQL 方案："),s("code",[a._v("update /* + [auto_commit] */")]),a._v("，需要修改 MySQL 源码")]),a._v(" "),s("li",[a._v("使用存储过程：整个事务在 MySQL 端完成")])]),a._v(" "),s("h4",{attrs:{id:"redis-后端缓存优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-后端缓存优化"}},[a._v("#")]),a._v(" Redis 后端缓存优化")]),a._v(" "),s("ol",{attrs:{start:"0"}},[s("li",[a._v("需要手动在 xml 中注入 RedisDao，因为 MyBatis 不处理 Redis，构造函数需要通过"),s("code",[a._v('<constructor-arg index="0" value="localhost" />')]),a._v("传入")]),a._v(" "),s("li",[a._v("使用 protobuf 对 json 数据进行序列化反序列化，性能最强！")]),a._v(" "),s("li",[a._v("创建 RedisPool 连接池，缓存优化")]),a._v(" "),s("li",[a._v("在超时的基础上维护一致性")])]),a._v(" "),s("h4",{attrs:{id:"并发优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发优化"}},[a._v("#")]),a._v(" 并发优化")]),a._v(" "),s("ol",[s("li",[a._v("MyBatis 调用存储过程，在 xml 中配置")]),a._v(" "),s("li",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images@master/imgs/202411071613279.png",alt:"后端系统部署架构"}})])]),a._v(" "),s("h2",{attrs:{id:"idea"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#idea"}},[a._v("#")]),a._v(" IDEA")]),a._v(" "),s("h3",{attrs:{id:"设置注释对齐"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置注释对齐"}},[a._v("#")]),a._v(" 设置注释对齐")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/EricYangXD/vital-images@master/imgs/202411111111171.png",alt:"设置注释对齐"}})]),a._v(" "),s("h2",{attrs:{id:"工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[a._v("#")]),a._v(" 工具")]),a._v(" "),s("h3",{attrs:{id:"knife4j-和-swagger"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#knife4j-和-swagger"}},[a._v("#")]),a._v(" Knife4j 和 Swagger")]),a._v(" "),s("p",[a._v("Knife4j 是一个为 Java 项目生成和管理 API 文档的工具。实际上，它是 Swagger UI 的一个增强工具集，旨在让 Swagger 生成的 API 文档更优雅、更强大。")]),a._v(" "),s("h3",{attrs:{id:"slf4j、logback-和-log4j"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slf4j、logback-和-log4j"}},[a._v("#")]),a._v(" slf4j、logback 和 log4j")]),a._v(" "),s("h4",{attrs:{id:"slf4j"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slf4j"}},[a._v("#")]),a._v(" slf4j")]),a._v(" "),s("p",[a._v("slf4j 是一个日志门面，它提供了一个统一的日志接口，使得开发者可以在不同的日志实现之间进行切换，而不需要修改大量的代码。slf4j 本身并不提供日志实现，它只是一个接口。")]),a._v(" "),s("h4",{attrs:{id:"logback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logback"}},[a._v("#")]),a._v(" logback")]),a._v(" "),s("p",[a._v("logback 是一个基于 slf4j 的日志框架，它提供了灵活的日志配置和高效的日志记录功能。logback 是 slf4j 的默认实现之一。")]),a._v(" "),s("h4",{attrs:{id:"log4j"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#log4j"}},[a._v("#")]),a._v(" log4j")]),a._v(" "),s("p",[a._v("log4j 是另一个广泛使用的日志框架，它提供了丰富的日志配置选项和灵活的日志记录功能。log4j 是 slf4j 的另一个实现之一。")]),a._v(" "),s("h3",{attrs:{id:"mybatis-generator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-generator"}},[a._v("#")]),a._v(" MyBatis Generator")]),a._v(" "),s("p",[a._v("MyBatis Generator 是一个用于自动生成 MyBatis 相关代码的工具。它可以自动生成实体类、Mapper 接口和 XML 映射文件，从而减少手动编写代码的工作量。")]),a._v(" "),s("h3",{attrs:{id:"sonarqube"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sonarqube"}},[a._v("#")]),a._v(" SonarQube")]),a._v(" "),s("p",[a._v("SonarQube 是一个代码质量管理工具，它可以帮助开发者检测代码中的缺陷、代码风格和代码复杂度等。")]),a._v(" "),s("h3",{attrs:{id:"junit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#junit"}},[a._v("#")]),a._v(" JUnit")]),a._v(" "),s("p",[a._v("JUnit 是一个用于编写和运行单元测试的框架，它可以帮助开发者验证代码的正确性和稳定性。")]),a._v(" "),s("h3",{attrs:{id:"mockito"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mockito"}},[a._v("#")]),a._v(" Mockito")]),a._v(" "),s("p",[a._v("Mockito 是一个用于编写单元测试的模拟框架，它可以帮助开发者模拟对象的行为，从而实现对代码的隔离测试。")]),a._v(" "),s("h3",{attrs:{id:"spring-boot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot"}},[a._v("#")]),a._v(" Spring Boot")]),a._v(" "),s("p",[a._v("Spring Boot 是一个用于简化 Spring 应用程序开发的框架，它提供了自动配置、嵌入式服务器和简化配置等功能。")]),a._v(" "),s("h3",{attrs:{id:"spring-security"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-security"}},[a._v("#")]),a._v(" Spring Security")]),a._v(" "),s("p",[a._v("Spring Security 是一个用于实现安全控制的框架，它提供了认证、授权、加密和会话管理等功能。提供了强大的功能，帮助开发人员实现身份认证、授权、会话管理以及其他与安全相关的任务。")]),a._v(" "),s("h3",{attrs:{id:"spring-data-jpa"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-jpa"}},[a._v("#")]),a._v(" Spring Data JPA")]),a._v(" "),s("p",[a._v("Spring Data JPA 是一个用于简化 JPA 开发的框架，它提供了自动仓库、查询方法和简化配置等功能。")]),a._v(" "),s("h3",{attrs:{id:"spring-cloud"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud"}},[a._v("#")]),a._v(" Spring Cloud")]),a._v(" "),s("p",[a._v("Spring Cloud 是一个用于构建分布式系统的框架，它提供了服务注册、服务发现、负载均衡和断路器等功能。")])])}),[],!1,null,null,null);t.default=r.exports}}]);